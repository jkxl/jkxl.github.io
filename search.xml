<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>你写的Java代码不优雅啊！</title>
      <link href="/2019/09/01/%E4%BD%A0%E5%86%99%E7%9A%84Java%E4%BB%A3%E7%A0%81%E4%B8%8D%E4%BC%98%E9%9B%85%E5%95%8A%EF%BC%81/"/>
      <url>/2019/09/01/%E4%BD%A0%E5%86%99%E7%9A%84Java%E4%BB%A3%E7%A0%81%E4%B8%8D%E4%BC%98%E9%9B%85%E5%95%8A%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>@<a href="你写的Java代码不优雅啊！">TOC</a></p><h1 id="1-导读"><a href="#1-导读" class="headerlink" title="1. 导读"></a>1. 导读</h1><p>昨天在技术交流群，有位读者吐槽刚刚接手的代码（文章标题），代码全篇无格式，无注释，多个嵌套不打括号，函数命名不规范，代码实在看不下去。随着软件项目代码的日积月累，系统维护成本变得越来越高，代码质量是所有软件团队面临的共同问题。</p><p>持续地优化代码，提高代码的质量，是提升系统生命力的有效手段之一。软件系统思维有句话“Less coding, more thinking（少编码、多思考）”，也有这么一句俚语“Think more, code less（思考越多，编码越少）”。所以，我们在编码中多思考多总结，努力提升自己的编码水平，才能编写出更优雅、更高质、更高效的代码。</p><p>刚刚接触项目或者实习阶段，写出的代码质量差难免被吐槽，本文便总结了一套与Java函数相关的编码规则，旨在给广大Java程序员一些编码建议，有助于大家编写出更优雅、更高质、更高效的代码。这套编码规则，通过在高德采集部门的实践，已经取得了不错的成效。</p><h1 id="2-使用通用工具函数"><a href="#2-使用通用工具函数" class="headerlink" title="2.使用通用工具函数"></a>2.使用通用工具函数</h1><h2 id="2-1-案例一"><a href="#2-1-案例一" class="headerlink" title="2.1 案例一"></a>2.1 案例一</h2><p>现象描述：</p><p>不完善的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thisName != <span class="keyword">null</span> &amp;&amp; thisName.equals(name);</span><br></pre></td></tr></table></figure><p>更完善的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(thisName == name) || (thisName != <span class="keyword">null</span> &amp;&amp; thisName.equals(name));</span><br></pre></td></tr></table></figure><p><code>建议方案</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Objects.equals(name, thisName);</span><br></pre></td></tr></table></figure><h2 id="2-2-案例二"><a href="#2-2-案例二" class="headerlink" title="2.2 案例二"></a>2.2 案例二</h2><p>现象描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!(list == <span class="keyword">null</span> || list.isEmpty());</span><br></pre></td></tr></table></figure><p><code>建议方案</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.CollectionUtils;</span><br><span class="line">CollectionUtils.isNotEmpty(list);</span><br></pre></td></tr></table></figure><h2 id="2-3-主要收益"><a href="#2-3-主要收益" class="headerlink" title="2.3 主要收益"></a>2.3 主要收益</h2><ul><li><p>函数式编程，业务代码减少，逻辑一目了然；</p></li><li><p>通用工具函数，逻辑考虑周全，出问题概率低</p></li></ul><h1 id="3-拆分超大函数"><a href="#3-拆分超大函数" class="headerlink" title="3. 拆分超大函数"></a>3. 拆分超大函数</h1><p>当一个函数超过80行后，就属于超大函数，需要进行拆分。</p><h2 id="3-1-案例一：每一个代码块都可以封装为一个函"><a href="#3-1-案例一：每一个代码块都可以封装为一个函" class="headerlink" title="3.1 案例一：每一个代码块都可以封装为一个函"></a>3.1 案例一：每一个代码块都可以封装为一个函</h2><p>每一个代码块必然有一个注释，用于解释这个代码块的功能。</p><p>如果代码块前方有一行注释，就是在提醒你——可以将这段代码替换成一个函数，而且可以在注释的基础上给这个函数命名。如果函数有一个描述恰当的名字，就不需要去看内部代码究竟是如何实现的。</p><p>现象描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 每日生活函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">liveDaily</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 吃饭</span></span><br><span class="line">    <span class="comment">// 吃饭相关代码几十行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编码</span></span><br><span class="line">    <span class="comment">// 编码相关代码几十行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 睡觉</span></span><br><span class="line">    <span class="comment">// 睡觉相关代码几十行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>建议方案</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每日生活函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">liveDaily</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 吃饭</span></span><br><span class="line">    eat();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编码</span></span><br><span class="line">    code();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 睡觉</span></span><br><span class="line">    sleep();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 吃饭函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 吃饭相关代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 编码相关代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 睡觉函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 睡觉相关代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-案例二：每一个循环体都可以封装为一个函"><a href="#3-2-案例二：每一个循环体都可以封装为一个函" class="headerlink" title="3.2 案例二：每一个循环体都可以封装为一个函"></a>3.2 案例二：每一个循环体都可以封装为一个函</h2><p>现象描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 生活函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">live</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (isAlive) &#123;</span><br><span class="line">        <span class="comment">// 吃饭</span></span><br><span class="line">        eat();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编码</span></span><br><span class="line">        code();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 睡觉</span></span><br><span class="line">        sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>建议方案</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生活函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">live</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (isAlive) &#123;</span><br><span class="line">        <span class="comment">// 每日生活</span></span><br><span class="line">        liveDaily();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每日生活函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">liveDaily</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 吃饭</span></span><br><span class="line">    eat();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编码</span></span><br><span class="line">    code();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 睡觉</span></span><br><span class="line">    sleep();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-案例三：每一个条件体都可以封装为一个函"><a href="#3-3-案例三：每一个条件体都可以封装为一个函" class="headerlink" title="3.3 案例三：每一个条件体都可以封装为一个函"></a>3.3 案例三：每一个条件体都可以封装为一个函</h2><p>现象描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外出函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否周末</span></span><br><span class="line">    <span class="comment">// 判断是否周末: 是周末则游玩</span></span><br><span class="line">    <span class="keyword">if</span> (isWeekday()) &#123;</span><br><span class="line">        <span class="comment">// 游玩代码几十行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否周末: 非周末则工作</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 工作代码几十行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>建议方案</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外出函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否周末</span></span><br><span class="line">    <span class="comment">// 判断是否周末: 是周末则游玩</span></span><br><span class="line">    <span class="keyword">if</span> (isWeekday()) &#123;</span><br><span class="line">        play();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断是否周末: 非周末则工作</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 游玩函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 游玩代码几十行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工作函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 工作代码几十行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-主要收益"><a href="#3-4-主要收益" class="headerlink" title="3.4 主要收益"></a>3.4 主要收益</h2><p>函数越短小精悍，功能就越单一，往往生命周期较长；</p><p>一个函数越长，就越不容易理解和维护，维护人员不敢轻易修改；</p><p>在过长函数中，往往含有难以发现的重复代码。</p><h1 id="4-同一函数内代码块级别尽量一致"><a href="#4-同一函数内代码块级别尽量一致" class="headerlink" title="4. 同一函数内代码块级别尽量一致"></a>4. 同一函数内代码块级别尽量一致</h1><h2 id="4-1-案例一"><a href="#4-1-案例一" class="headerlink" title="4.1 案例一"></a>4.1 案例一</h2><p>现象描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每日生活函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">liveDaily</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 吃饭</span></span><br><span class="line">    eat();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编码</span></span><br><span class="line">    code();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 睡觉</span></span><br><span class="line">    <span class="comment">// 睡觉相关代码几十行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显，睡觉这块代码块，跟eat（吃饭）和code（编码）不在同一级别上，显得比较突兀。如果把写代码比作写文章，eat（吃饭）和code（编码）是段落大意，而睡觉这块代码块属于一个详细段落。而在liveDaily（每日生活）这个函数上，只需要写出主要流程（段落大意）即可。</p><p><code>建议方案</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">liveDaily</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 吃饭</span></span><br><span class="line">    eat();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编码</span></span><br><span class="line">    code();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 睡觉</span></span><br><span class="line">    sleep();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 睡觉</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 睡觉相关代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-主要收益"><a href="#4-2-主要收益" class="headerlink" title="4.2 主要收益"></a>4.2 主要收益</h2><ul><li><p>函数调用表明用途，函数实现表达逻辑，层次分明便于理解；</p></li><li><p>不用层次的代码块放在一个函数中，容易让人觉得代码头重脚轻。</p></li></ul><h1 id="5-封装相同功能代码为函数"><a href="#5-封装相同功能代码为函数" class="headerlink" title="5.封装相同功能代码为函数"></a>5.封装相同功能代码为函数</h1><h2 id="5-1-案例一：封装相同代码为函数"><a href="#5-1-案例一：封装相同代码为函数" class="headerlink" title="5.1 案例一：封装相同代码为函数"></a>5.1 案例一：封装相同代码为函数</h2><p>现象描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 禁用用户函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disableUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 禁用黑名单用户</span></span><br><span class="line">    List&lt;Long&gt; userIdList = queryBlackUser();</span><br><span class="line">    <span class="keyword">for</span> (Long userId : userIdList) &#123;</span><br><span class="line">        User userUpdate = <span class="keyword">new</span> User();</span><br><span class="line">        userUpdate.setId(userId);</span><br><span class="line">        userUpdate.setEnable(Boolean.FALSE);</span><br><span class="line">        userDAO.update(userUpdate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用过期用户</span></span><br><span class="line">    userIdList = queryExpiredUser();</span><br><span class="line">    <span class="keyword">for</span> (Long userId : userIdList) &#123;</span><br><span class="line">        User userUpdate = <span class="keyword">new</span> User();</span><br><span class="line">        userUpdate.setId(userId);</span><br><span class="line">        userUpdate.setEnable(Boolean.FALSE);</span><br><span class="line">        userDAO.update(userUpdate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>建议方案</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 禁用用户函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disableUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 禁用黑名单用户</span></span><br><span class="line">    List&lt;Long&gt; userIdList = queryBlackUser();</span><br><span class="line">    <span class="keyword">for</span> (Long userId : userIdList) &#123;</span><br><span class="line">        disableUser(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用过期用户</span></span><br><span class="line">    userIdList = queryExpiredUser();</span><br><span class="line">    <span class="keyword">for</span> (Long userId : userIdList) &#123;</span><br><span class="line">        disableUser(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用用户函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">disableUser</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    User userUpdate = <span class="keyword">new</span> User();</span><br><span class="line">    userUpdate.setId(userId);</span><br><span class="line">    userUpdate.setEnable(Boolean.FALSE);</span><br><span class="line">    userDAO.update(userUpdate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-案例二：封装相似代码为函数"><a href="#5-2-案例二：封装相似代码为函数" class="headerlink" title="5.2 案例二：封装相似代码为函数"></a>5.2 案例二：封装相似代码为函数</h2><p>封装相似代码为函数，差异性通过函数参数控制。</p><p>现象描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过工单函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adoptOrder</span><span class="params">(Long orderId)</span> </span>&#123;</span><br><span class="line">    Order orderUpdate = <span class="keyword">new</span> Order();</span><br><span class="line">    orderUpdate.setId(orderId);</span><br><span class="line">    orderUpdate.setStatus(OrderStatus.ADOPTED);</span><br><span class="line">    orderUpdate.setAuditTime(<span class="keyword">new</span> Date());</span><br><span class="line">    orderDAO.update(orderUpdate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 驳回工单函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectOrder</span><span class="params">(Long orderId)</span> </span>&#123;</span><br><span class="line">    Order orderUpdate = <span class="keyword">new</span> Order();</span><br><span class="line">    orderUpdate.setId(orderId);</span><br><span class="line">    orderUpdate.setStatus(OrderStatus.REJECTED);</span><br><span class="line">    orderUpdate.setAuditTime(<span class="keyword">new</span> Date());</span><br><span class="line">    orderDAO.update(orderUpdate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>建议方案</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过工单函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adoptOrder</span><span class="params">(Long orderId)</span> </span>&#123;</span><br><span class="line">    auditOrder(orderId, OrderStatus.ADOPTED);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 驳回工单函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectOrder</span><span class="params">(Long orderId)</span> </span>&#123;</span><br><span class="line">    auditOrder(orderId, OrderStatus.REJECTED);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 审核工单函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">auditOrder</span><span class="params">(Long orderId, OrderStatus orderStatus)</span> </span>&#123;</span><br><span class="line">    Order orderUpdate = <span class="keyword">new</span> Order();</span><br><span class="line">    orderUpdate.setId(orderId);</span><br><span class="line">    orderUpdate.setStatus(orderStatus);</span><br><span class="line">    orderUpdate.setAuditTime(<span class="keyword">new</span> Date());</span><br><span class="line">    orderDAO.update(orderUpdate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-主要收益"><a href="#5-3-主要收益" class="headerlink" title="5.3 主要收益"></a>5.3 主要收益</h2><ul><li><p>封装公共函数，减少代码行数，提高代码质量；</p></li><li><p>封装公共函数，使业务代码更精炼，可读性可维护性更强。</p></li></ul><h1 id="6-封装获取参数值函数"><a href="#6-封装获取参数值函数" class="headerlink" title="6.封装获取参数值函数"></a>6.封装获取参数值函数</h1><h2 id="6-1-案例一"><a href="#6-1-案例一" class="headerlink" title="6.1 案例一"></a>6.1 案例一</h2><p>现象描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否通过函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPassed</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取通过阈值</span></span><br><span class="line">    <span class="keyword">double</span> thisPassThreshold = PASS_THRESHOLD;</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(passThreshold)) &#123;</span><br><span class="line">        thisPassThreshold = passThreshold;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取通过率</span></span><br><span class="line">    <span class="keyword">double</span> passRate = getPassRate(userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判读是否通过</span></span><br><span class="line">    <span class="keyword">return</span> passRate &gt;= thisPassThreshold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>建议方案</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否通过函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPassed</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取通过阈值</span></span><br><span class="line">    <span class="keyword">double</span> thisPassThreshold = getPassThreshold();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取通过率</span></span><br><span class="line">    <span class="keyword">double</span> passRate = getPassRate(userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判读是否通过</span></span><br><span class="line">    <span class="keyword">return</span> passRate &gt;= thisPassThreshold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取通过阈值函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getPassThreshold</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(passThreshold)) &#123;</span><br><span class="line">        <span class="keyword">return</span> passThreshold;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> PASS_THRESHOLD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-主要收益"><a href="#6-2-主要收益" class="headerlink" title="6.2 主要收益"></a>6.2 主要收益</h2><ul><li><p>把获取参数值从业务函数中独立，使业务逻辑更清晰；</p></li><li><p>封装的获取参数值为独立函数，可以在代码中重复使用。</p></li></ul><h1 id="7-通过接口参数化封装相同逻辑"><a href="#7-通过接口参数化封装相同逻辑" class="headerlink" title="7. 通过接口参数化封装相同逻辑"></a>7. 通过接口参数化封装相同逻辑</h1><h2 id="7-1-案例一"><a href="#7-1-案例一" class="headerlink" title="7.1 案例一"></a>7.1 案例一</h2><p>现象描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 发送审核员结算数据函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAuditorSettleData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;WorkerSettleData&gt; settleDataList = auditTaskDAO.statAuditorSettleData();</span><br><span class="line">    <span class="keyword">for</span> (WorkerSettleData settleData : settleDataList) &#123;</span><br><span class="line">        WorkerPushData pushData = <span class="keyword">new</span> WorkerPushData();</span><br><span class="line">        pushData.setId(settleData.getWorkerId());</span><br><span class="line">        pushData.setType(WorkerPushDataType.AUDITOR);</span><br><span class="line">        pushData.setData(settleData);</span><br><span class="line">        pushService.push(pushData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送验收员结算数据函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendCheckerSettleData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;WorkerSettleData&gt; settleDataList = auditTaskDAO.statCheckerSettleData();</span><br><span class="line">    <span class="keyword">for</span> (WorkerSettleData settleData : settleDataList) &#123;</span><br><span class="line">        WorkerPushData pushData = <span class="keyword">new</span> WorkerPushData();</span><br><span class="line">        pushData.setId(settleData.getWorkerId());</span><br><span class="line">        pushData.setType(WorkerPushDataType.CHECKER);</span><br><span class="line">        pushData.setData(settleData);</span><br><span class="line">        pushService.push(pushData);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>建议方案</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送审核员结算数据函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAuditorSettleData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sendWorkerSettleData(WorkerPushDataType.AUDITOR, () -&gt; auditTaskDAO.statAuditorSettleData());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送验收员结算数据函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendCheckerSettleData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sendWorkerSettleData(WorkerPushDataType.CHECKER, () -&gt; auditTaskDAO.statCheckerSettleData());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送作业员结算数据函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendWorkerSettleData</span><span class="params">(WorkerPushDataType dataType, WorkerSettleDataProvider dataProvider)</span> </span>&#123;</span><br><span class="line">    List&lt;WorkerSettleData&gt; settleDataList = dataProvider.statWorkerSettleData();</span><br><span class="line">    <span class="keyword">for</span> (WorkerSettleData settleData : settleDataList) &#123;</span><br><span class="line">        WorkerPushData pushData = <span class="keyword">new</span> WorkerPushData();</span><br><span class="line">        pushData.setId(settleData.getWorkerId());</span><br><span class="line">        pushData.setType(dataType);</span><br><span class="line">        pushData.setData(settleData);</span><br><span class="line">        pushService.push(pushData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作业员结算数据提供者接口</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">WorkerSettleDataProvider</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 统计作业员结算数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;WorkerSettleData&gt; <span class="title">statWorkerSettleData</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-主要收益"><a href="#7-2-主要收益" class="headerlink" title="7.2 主要收益"></a>7.2 主要收益</h2><ul><li><p>把核心逻辑从各个业务函数中抽析，使业务代码更清晰更易维护；</p></li><li><p>避免重复性代码多次编写，精简重复函数越多收益越大。</p></li></ul><h1 id="8-减少函数代码层级"><a href="#8-减少函数代码层级" class="headerlink" title="8.减少函数代码层级"></a>8.减少函数代码层级</h1><p>如果要使函数优美，建议函数代码层级在1-4之间，过多的缩进会让函数难以阅读。</p><h2 id="8-1-案例一：利用return提前返回函数"><a href="#8-1-案例一：利用return提前返回函数" class="headerlink" title="8.1 案例一：利用return提前返回函数"></a>8.1 案例一：利用return提前返回函数</h2><p>现象描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取用户余额函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">getUserBalance</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    User user = getUser(userId);</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(user)) &#123;</span><br><span class="line">        UserAccount account = user.getAccount();</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(account)) &#123;</span><br><span class="line">            <span class="keyword">return</span> account.getBalance();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>建议方案：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 获取用户余额函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">getUserBalance</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取用户信息</span></span><br><span class="line">    User user = getUser(userId);</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户账户</span></span><br><span class="line">    UserAccount account = user.getAccount();</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(account)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回账户余额</span></span><br><span class="line">    <span class="keyword">return</span> account.getBalance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-案例二：利用continue提前结束循环"><a href="#8-2-案例二：利用continue提前结束循环" class="headerlink" title="8.2 案例二：利用continue提前结束循环"></a>8.2 案例二：利用continue提前结束循环</h2><p>现象描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 获取合计余额函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalBalance</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始合计余额</span></span><br><span class="line">    <span class="keyword">double</span> totalBalance = <span class="number">0.0</span>D;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次累加余额</span></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        <span class="comment">// 获取用户账户</span></span><br><span class="line">        UserAccount account = user.getAccount();</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(account)) &#123;</span><br><span class="line">            <span class="comment">// 累加用户余额</span></span><br><span class="line">            Double balance = account.getBalance();</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(balance)) &#123;</span><br><span class="line">                totalBalance += balance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回合计余额</span></span><br><span class="line">    <span class="keyword">return</span> totalBalance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>建议方案：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取合计余额函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalBalance</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始合计余额</span></span><br><span class="line">    <span class="keyword">double</span> totalBalance = <span class="number">0.0</span>D;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次累加余额</span></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        <span class="comment">// 获取用户账户</span></span><br><span class="line">        UserAccount account = user.getAccount();</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(account)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 累加用户余额</span></span><br><span class="line">        Double balance = account.getBalance();</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(balance)) &#123;</span><br><span class="line">            totalBalance += balance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回合计余额</span></span><br><span class="line">    <span class="keyword">return</span> totalBalance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特殊说明</p><p>其它方式：在循环体中，先调用案例1的函数getUserBalance(获取用户余额)，再进行对余额进行累加。</p><p>在循环体中，建议最多使用一次continue。如果需要有使用多次continue的需求，建议把循环体封装为一个函数。</p><h2 id="8-3-案例三：利用条件表达式函数减少层级"><a href="#8-3-案例三：利用条件表达式函数减少层级" class="headerlink" title="8.3 案例三：利用条件表达式函数减少层级"></a>8.3 案例三：利用条件表达式函数减少层级</h2><p>请参考下一章的”案例2: 把复杂条件表达式封装为函数”</p><h2 id="8-4-主要收益"><a href="#8-4-主要收益" class="headerlink" title="8.4 主要收益"></a>8.4 主要收益</h2><ul><li><p>代码层级减少，代码缩进减少；</p></li><li><p>模块划分清晰，方便阅读维护。</p></li></ul><h1 id="9-封装条件表达式函数"><a href="#9-封装条件表达式函数" class="headerlink" title="9.封装条件表达式函数"></a>9.封装条件表达式函数</h1><h2 id="9-1-案例一：把简单条件表达式封装为函数"><a href="#9-1-案例一：把简单条件表达式封装为函数" class="headerlink" title="9.1 案例一：把简单条件表达式封装为函数"></a>9.1 案例一：把简单条件表达式封装为函数</h2><p>现象描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取门票价格函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTicketPrice</span><span class="params">(Date currDate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(currDate) &amp;&amp; currDate.after(DISCOUNT_BEGIN_DATE)</span><br><span class="line">        &amp;&amp; currDate.before(DISCOUNT_END_DATE)) &#123;</span><br><span class="line">        <span class="keyword">return</span> TICKET_PRICE * DISCOUNT_RATE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TICKET_PRICE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>建议方案：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取门票价格函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTicketPrice</span><span class="params">(Date currDate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isDiscountDate(currDate)) &#123;</span><br><span class="line">        <span class="keyword">return</span> TICKET_PRICE * DISCOUNT_RATE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TICKET_PRICE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否折扣日期函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDiscountDate</span><span class="params">(Date currDate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.nonNull(currDate) &amp;&amp; </span><br><span class="line">currDate.after(DISCOUNT_BEGIN_DATE)</span><br><span class="line">        &amp;&amp; currDate.before(DISCOUNT_END_DATE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-2-案例二：把复杂条件表达式封装为函数"><a href="#9-2-案例二：把复杂条件表达式封装为函数" class="headerlink" title="9.2 案例二：把复杂条件表达式封装为函数"></a>9.2 案例二：把复杂条件表达式封装为函数</h2><p>现象描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取土豪用户列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getRichUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始土豪用户列表</span></span><br><span class="line">    List&lt;User&gt; richUserList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次查找土豪用户</span></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        <span class="comment">// 获取用户账户</span></span><br><span class="line">        UserAccount account = user.getAccount();</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(account)) &#123;</span><br><span class="line">            <span class="comment">// 判断用户余额</span></span><br><span class="line">            Double balance = account.getBalance();</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(balance) &amp;&amp; balance.compareTo(RICH_THRESHOLD) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 添加土豪用户</span></span><br><span class="line">                richUserList.add(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回土豪用户列表</span></span><br><span class="line">    <span class="keyword">return</span> richUserList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>建议方案：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 获取土豪用户列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getRichUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始土豪用户列表</span></span><br><span class="line">    List&lt;User&gt; richUserList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次查找土豪用户</span></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        <span class="comment">// 判断土豪用户</span></span><br><span class="line">        <span class="keyword">if</span> (isRichUser(user)) &#123;</span><br><span class="line">            <span class="comment">// 添加土豪用户</span></span><br><span class="line">            richUserList.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回土豪用户列表</span></span><br><span class="line">    <span class="keyword">return</span> richUserList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否土豪用户</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRichUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取用户账户</span></span><br><span class="line">    UserAccount account = user.getAccount();</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(account)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户余额</span></span><br><span class="line">    Double balance = account.getBalance();</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(balance)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较用户余额</span></span><br><span class="line">    <span class="keyword">return</span> balance.compareTo(RICH_THRESHOLD) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码也可以用采用流式(Stream)编程的过滤来实现。</p><h2 id="9-3-主要收益"><a href="#9-3-主要收益" class="headerlink" title="9.3 主要收益"></a>9.3 主要收益</h2><ul><li><p>把条件表达式从业务函数中独立，使业务逻辑更清晰；</p></li><li><p>封装的条件表达式为独立函数，可以在代码中重复使用。</p></li></ul><h1 id="10-尽量避免不必要的空指针判断"><a href="#10-尽量避免不必要的空指针判断" class="headerlink" title="10.尽量避免不必要的空指针判断"></a>10.尽量避免不必要的空指针判断</h1><p>本章只适用于项目内部代码，并且是自己了解的代码，才能够尽量避免不必要的空指针判断。对于第三方中间件和系统接口，必须做好空指针判断，以保证代码的健壮性。</p><h2 id="10-1-案例一：调用函数保证参数不为空，被调用函数尽量避免不必要的空指针判断"><a href="#10-1-案例一：调用函数保证参数不为空，被调用函数尽量避免不必要的空指针判断" class="headerlink" title="10.1 案例一：调用函数保证参数不为空，被调用函数尽量避免不必要的空指针判断"></a>10.1 案例一：调用函数保证参数不为空，被调用函数尽量避免不必要的空指针判断</h2><p>现象描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建用户信息</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">... <span class="comment">// 赋值用户相关信息</span></span><br><span class="line">createUser(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建用户函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判断用户为空</span></span><br><span class="line">    <span class="keyword">if</span>(Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建用户信息</span></span><br><span class="line">    userDAO.insert(user);</span><br><span class="line">    userRedis.save(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>建议方案：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建用户信息</span></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">... <span class="comment">// 赋值用户相关信息</span></span><br><span class="line">createUser(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建用户函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 创建用户信息</span></span><br><span class="line">    userDAO.insert(user);</span><br><span class="line">    userRedis.save(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10.2 案例二：被调用函数保证返回不为空,调用函数尽量避免不必要的空指针判断</p><p>现象描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存用户函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构建用户信息</span></span><br><span class="line">    User user = buildUser(id, name);</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BizRuntimeException(<span class="string">"构建用户信息为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存用户信息</span></span><br><span class="line">    userDAO.insert(user);</span><br><span class="line">    userRedis.save(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建用户函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">buildUser</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(id);</span><br><span class="line">    user.setName(name);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>建议方案：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存用户函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构建用户信息</span></span><br><span class="line">    User user = buildUser(id, name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存用户信息</span></span><br><span class="line">    userDAO.insert(user);</span><br><span class="line">    userRedis.save(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建用户函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> User <span class="title">buildUser</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(id);</span><br><span class="line">    user.setName(name);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-3-案例三：赋值逻辑保证列表数据项不为空，处理逻辑尽量避免不必要的空指针判断"><a href="#10-3-案例三：赋值逻辑保证列表数据项不为空，处理逻辑尽量避免不必要的空指针判断" class="headerlink" title="10.3 案例三：赋值逻辑保证列表数据项不为空，处理逻辑尽量避免不必要的空指针判断"></a>10.3 案例三：赋值逻辑保证列表数据项不为空，处理逻辑尽量避免不必要的空指针判断</h2><p>现象描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询用户列表</span></span><br><span class="line">List&lt;UserDO&gt; userList = userDAO.queryAll();</span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isEmpty(userList)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转化用户列表</span></span><br><span class="line">List&lt;UserVO&gt; userVoList = <span class="keyword">new</span> ArrayList&lt;&gt;(userList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO user : userList) &#123;</span><br><span class="line">    UserVO userVo = <span class="keyword">new</span> UserVO();</span><br><span class="line">    userVo.setId(user.getId());</span><br><span class="line">    userVo.setName(user.getName());</span><br><span class="line">    userVoList.add(userVo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依次处理用户</span></span><br><span class="line"><span class="keyword">for</span> (UserVO userVo : userVoList) &#123;</span><br><span class="line">    <span class="comment">// 判断用户为空</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(userVo)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理相关逻辑</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>建议方案：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询用户列表</span></span><br><span class="line">List&lt;UserDO&gt; userList = userDAO.queryAll();</span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isEmpty(userList)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转化用户列表</span></span><br><span class="line">List&lt;UserVO&gt; userVoList = <span class="keyword">new</span> ArrayList&lt;&gt;(userList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO user : userList) &#123;</span><br><span class="line">    UserVO userVo = <span class="keyword">new</span> UserVO();</span><br><span class="line">    userVo.setId(user.getId());</span><br><span class="line">    userVo.setName(user.getName());</span><br><span class="line">    userVoList.add(userVo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依次处理用户</span></span><br><span class="line"><span class="keyword">for</span> (UserVO userVo : userVoList) &#123;</span><br><span class="line">    <span class="comment">// 处理相关逻辑</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-4-案例四：MyBatis查询函数返回列表和数据项不为空，可以不用空指针判断"><a href="#10-4-案例四：MyBatis查询函数返回列表和数据项不为空，可以不用空指针判断" class="headerlink" title="10.4 案例四：MyBatis查询函数返回列表和数据项不为空，可以不用空指针判断"></a>10.4 案例四：MyBatis查询函数返回列表和数据项不为空，可以不用空指针判断</h2><p>MyBatis是一款优秀的持久层框架，是在项目中使用的最广泛的数据库中间件之一。通过对MyBatis源码进行分析，查询函数返回的列表和数据项都不为空，在代码中可以不用进行空指针判断。</p><p>现象描述：</p><p>这种写法没有问题，只是过于保守了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询用户函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;UserVO&gt; <span class="title">queryUser</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询用户列表</span></span><br><span class="line">    List&lt;UserDO&gt; userList = userDAO.query(id, name);</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(userList)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转化用户列表</span></span><br><span class="line">    List&lt;UserVO&gt; voList = <span class="keyword">new</span> ArrayList&lt;&gt;(userList.size());</span><br><span class="line">    <span class="keyword">for</span> (UserDO user : userList) &#123;</span><br><span class="line">        <span class="comment">// 判断对象为空</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加用户信息</span></span><br><span class="line">        UserVO vo = <span class="keyword">new</span> UserVO();</span><br><span class="line">        BeanUtils.copyProperties(user, vo);</span><br><span class="line">        voList.add(vo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回用户列表</span></span><br><span class="line">    <span class="keyword">return</span> voList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>建议方案：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询用户函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;UserVO&gt; <span class="title">queryUser</span><span class="params">(Long id, String name)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询用户列表</span></span><br><span class="line">    List&lt;UserDO&gt; userList = userDAO.query(id, name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转化用户列表</span></span><br><span class="line">    List&lt;UserVO&gt; voList = <span class="keyword">new</span> ArrayList&lt;&gt;(userList.size());</span><br><span class="line">    <span class="keyword">for</span> (UserDO user : userList) &#123;</span><br><span class="line">        UserVO vo = <span class="keyword">new</span> UserVO();</span><br><span class="line">        BeanUtils.copyProperties(user, vo);</span><br><span class="line">        voList.add(vo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回用户列表</span></span><br><span class="line">    <span class="keyword">return</span> voList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-5-主要收益"><a href="#10-5-主要收益" class="headerlink" title="10.5 主要收益"></a>10.5 主要收益</h2><ul><li><p>避免不必要的空指针判断，精简业务代码处理逻辑，提高业务代码运行效率；</p></li><li><p>这些不必要的空指针判断，基本属于永远不执行的Death代码，删除有助于代码维护。</p></li></ul><p>转自微信公众号：高德技术，作者：常意</p>]]></content>
      
      
      <categories>
          
          <category> 代码优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 代码优化 </tag>
            
            <tag> 优雅代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flowable的REST API（一）</title>
      <link href="/2019/08/25/Flowable%E7%9A%84REST-API%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/08/25/Flowable%E7%9A%84REST-API%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>@[TOC](Flowable的REST API（一）)<br>关于flowable的一些操作和介绍。</p><p>现在，我很高兴使用Flowable Modeler来建模业务流程并创建用户任务和流程实例，但是，我还想使用Flowable的REST API与流程实例和用户任务进行交互。</p><h2 id="Flowable-Modeler"><a href="#Flowable-Modeler" class="headerlink" title="Flowable Modeler"></a>Flowable Modeler</h2><p>开始使用Flowable的最简单方法是使用flowable / all-in-one Docker镜像：</p><figure class="highlight docker"><figcaption><span>run --name flowable -p 8080:8080 flowable/all-in-one```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">要么</span><br><span class="line"></span><br><span class="line">```docker start --interactive flowable</span><br></pre></td></tr></table></figure><p>本地浏览器输入<a href="http://localhost:8080/flowable-modeler并使用默认用户ID登录：admin和password：test" target="_blank" rel="noopener">http://localhost:8080/flowable-modeler并使用默认用户ID登录：admin和password：test</a></p><p><img src="https://img-blog.csdnimg.cn/20190717091149718.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="登入"></p><p>然后，您将被重定向到Flowable Modeler仪表板中的“<strong>Process</strong>”选项卡：</p><p><img src="https://img-blog.csdnimg.cn/20190717091244906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="流程模型设计器-1"></p><p>要开始创建业务流程模型（使用BPMN标准），请单击“ <strong>创建流程</strong>”按钮：</p><p><img src="https://img-blog.csdnimg.cn/20190717091404480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="创建业务流程模型-1"></p><p>输入一个Model name，一个Model key和一个Description然后单击Create new model按钮：</p><p><img src="https://img-blog.csdnimg.cn/20190717091542138.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="BPMN编辑器"></p><p>“流程设计界面”（Flowable的BPMN编辑器）包括一个侧面菜单，其中包含BPMN 2.0元素的调色板和页面底部的属性面板。每个新流程都以Start事件（小圆圈）开头。</p><p>您可以从侧面菜单中拖放元素，也可以使用所选元素的“<strong>快捷菜单</strong>”。单击“ <strong>开始</strong>”事件元素，将显示其快捷菜单。</p><p>我们要添加一个User任务，所以单击代表用户的图标：</p><p><img src="https://img-blog.csdnimg.cn/20190717091741655.png" alt="添加用户任务"></p><p>这将添加一个箭头链接到Start事件的框。双击该框，为任务命名为“填写请假申请表”，然后在框外单击以保存更改：</p><p><img src="https://img-blog.csdnimg.cn/20190717091821917.png" alt="填空题形式"></p><p>再次单击该框以显示其快捷菜单，然后选择停止事件图标（带有粗边框的圆圈）：</p><p><img src="https://img-blog.csdnimg.cn/2019071709184083.png" alt="快捷菜单"></p><p>我们的业务流程模型现在包含一个Start事件，一个User任务和一个End事件：</p><p><img src="https://img-blog.csdnimg.cn/20190717091852682.png" alt="最终事件"></p><h2 id="分配任务"><a href="#分配任务" class="headerlink" title="分配任务"></a>分配任务</h2><p>为了使Flowable成功执行我们的业务流程，它需要知道哪些用户可以完成用户任务。选择“填写请假申请表”用户任务，然后单击其Assignments属性：</p><p><img src="https://img-blog.csdnimg.cn/20190717091936589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="任务"></p><p>您可以将任务分配给个人或组：</p><p><img src="https://img-blog.csdnimg.cn/20190717091954412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="分配任务"></p><p>勾选“<strong>允许流程创建人完成任务</strong>”框，然后单击“ 保存”按钮。</p><h2 id="关联表单"><a href="#关联表单" class="headerlink" title="关联表单"></a>关联表单</h2><p>要将表单与用户任务相关联，请选择“填写请假申请表单”用户任务，然后单击其Form reference属性：</p><p><img src="https://img-blog.csdnimg.cn/20190717092134100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="表单参考"></p><p>我们还没有任何形式：</p><p><img src="https://img-blog.csdnimg.cn/20190717092249557.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="新形式"></p><p>单击“ <strong>新建表单</strong>”按钮：</p><p><img src="https://img-blog.csdnimg.cn/20190717092300513.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="创建一个表单"></p><p>输入Form name，Form key和Description然后单击“ <strong>创建表单</strong>”按钮：</p><p><img src="https://img-blog.csdnimg.cn/20190717092336664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="形式建设者"></p><p>表单设计器包含一个侧面菜单，其中包含可以拖放到设计画布上的表单组件选项板：</p><p><img src="https://img-blog.csdnimg.cn/20190717092354434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="请假单应用形式"></p><h2 id="应用定义"><a href="#应用定义" class="headerlink" title="应用定义"></a>应用定义</h2><p>现在我们已经建模了我们的业务流程，我们需要让它供人们使用。导航到Flowable Modeler仪表板中的“应用程序”选项卡，然后单击“ 创建应用程序”按钮：</p><p><img src="https://img-blog.csdnimg.cn/20190717092433935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="新建应用程序定义"></p><p>输入App definition name，App definition key和Description然后单击Create new app definition按钮：</p><p><img src="https://img-blog.csdnimg.cn/20190717092511428.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="应用程序定义，细节"></p><p>我更改了<strong>Icon</strong>，使用<strong>Edit included models</strong>按钮将’<strong>Leave Application Process</strong>‘添加到’<strong>HR App</strong>‘，然后点击<strong>Save</strong>图标：</p><p><img src="https://img-blog.csdnimg.cn/20190717092537581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="应用标签小时应用内"></p><p>点击“<strong>HR App</strong>”卡：</p><p><img src="https://img-blog.csdnimg.cn/20190717092543646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="HR-APP-发布"></p><p><strong>注意</strong>：您可以将App定义导出为zip文件或可部署的bar文件。</p><p>单击“ <strong>发布</strong>”按钮：</p><p>屏幕截图 -  2018年12月24日 - 在 -  35年8月21日</p><p>单击“ <strong>发布应用程序定义</strong>”按钮。</p><p>现在我们将使用Flowable的REST API来检查我们的应用程序定义是否已部署：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i <span class="string">'http://admin:test@localhost:8080/flowable-task/process-api/repository/deployments'</span></span><br></pre></td></tr></table></figure><p>您应该看到如下输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="string">"c56b72eb-06f8-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"hr-app.zip"</span>,</span><br><span class="line">            <span class="string">"deploymentTime"</span>: <span class="string">"2018-12-23T21:21:54.532Z"</span>,</span><br><span class="line">            <span class="string">"category"</span>: <span class="keyword">null</span>,</span><br><span class="line">            <span class="string">"parentDeploymentId"</span>: <span class="string">"c55ec8b6-06f8-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="string">"url"</span>: <span class="string">"http://localhost:8080/flowable-task/process-api/repository/deployments/c56b72eb-06f8-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="string">"tenantId"</span>: <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"sort"</span>: <span class="string">"id"</span>,</span><br><span class="line">    <span class="string">"order"</span>: <span class="string">"asc"</span>,</span><br><span class="line">    <span class="string">"size"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们检查一下我们的流程定义是否已经部署过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i <span class="string">'http://admin:test@localhost:8080/flowable-task/process-api/repository/process-definitions'</span></span><br></pre></td></tr></table></figure><p>您应该看到如下输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="string">"leave-application-process:1:c5ae6f5e-06f8-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="string">"url"</span>: <span class="string">"http://localhost:8080/flowable-task/process-api/repository/process-definitions/leave-application-process:1:c5ae6f5e-06f8-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="string">"key"</span>: <span class="string">"leave-application-process"</span>,</span><br><span class="line">            <span class="string">"version"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Leave Application Process"</span>,</span><br><span class="line">            <span class="string">"description"</span>: <span class="string">"An employee wants to take some time off."</span>,</span><br><span class="line">            <span class="string">"tenantId"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"deploymentId"</span>: <span class="string">"c56b72eb-06f8-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="string">"deploymentUrl"</span>: <span class="string">"http://localhost:8080/flowable-task/process-api/repository/deployments/c56b72eb-06f8-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="string">"resource"</span>: <span class="string">"http://localhost:8080/flowable-task/process-api/repository/deployments/c56b72eb-06f8-11e9-a85e-0242ac110002/resources/leave-application-process.bpmn"</span>,</span><br><span class="line">            <span class="string">"diagramResource"</span>: <span class="string">"http://localhost:8080/flowable-task/process-api/repository/deployments/c56b72eb-06f8-11e9-a85e-0242ac110002/resources/leave-application-process.leave-application-process.png"</span>,</span><br><span class="line">            <span class="string">"category"</span>: <span class="string">"http://www.flowable.org/processdef"</span>,</span><br><span class="line">            <span class="string">"graphicalNotationDefined"</span>: <span class="keyword">true</span>,</span><br><span class="line">            <span class="string">"suspended"</span>: <span class="keyword">false</span>,</span><br><span class="line">            <span class="string">"startFormDefined"</span>: <span class="keyword">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"sort"</span>: <span class="string">"name"</span>,</span><br><span class="line">    <span class="string">"order"</span>: <span class="string">"asc"</span>,</span><br><span class="line">    <span class="string">"size"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流程任务"><a href="#流程任务" class="headerlink" title="流程任务"></a>流程任务</h2><p>地址访问： <a href="http://localhost:8080/flowable-task" target="_blank" rel="noopener">http://localhost:8080/flowable-task</a></p><p><img src="https://img-blog.csdnimg.cn/20190717093402774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="流动性任务-HR-应用"></p><p>单击“<strong>HR App</strong>”卡并导航到“进程”选项卡：</p><p><img src="https://img-blog.csdnimg.cn/20190717093408119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="流动性任务流程标签"></p><p>单击“ <strong>启动进程</strong>”按钮：</p><p><img src="https://img-blog.csdnimg.cn/20190717093415178.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="流动性任务，离开应用程序进程"></p><p>然后单击“ <strong>开始</strong>”进程按钮：</p><p><img src="https://img-blog.csdnimg.cn/20190717093446408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="流动性任务圈-2"></p><p>现在我们将使用Flowable的REST API来获取有关流程实例的信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i <span class="string">'http://admin:test@localhost:8080/flowable-task/process-api/runtime/process-instances'</span></span><br></pre></td></tr></table></figure><p>您应该看到如下输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="string">"02d460bb-070e-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="string">"url"</span>: <span class="string">"http://localhost:8080/flowable-task/process-api/runtime/process-instances/02d460bb-070e-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Leave Application Process - December 24th 2018"</span>,</span><br><span class="line">            <span class="string">"businessKey"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">"suspended"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"ended"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"processDefinitionId"</span>: <span class="string">"leave-application-process:1:c5ae6f5e-06f8-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="string">"processDefinitionUrl"</span>: <span class="string">"http://localhost:8080/flowable-task/process-api/repository/process-definitions/leave-application-process:1:c5ae6f5e-06f8-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="string">"activityId"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">"startedBy"</span>: <span class="string">"admin"</span>,</span><br><span class="line">            <span class="string">"started"</span>: <span class="string">"2018-12-23T23:53:56.992Z"</span>,</span><br><span class="line">            <span class="string">"variables"</span>: [],</span><br><span class="line">            <span class="string">"callbackId"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">"callbackType"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="string">"tenantId"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"completed"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"sort"</span>: <span class="string">"id"</span>,</span><br><span class="line">    <span class="string">"order"</span>: <span class="string">"asc"</span>,</span><br><span class="line">    <span class="string">"size"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们检查一下，看看我们是否有任务要完成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i <span class="string">'http://admin:test@localhost:8080/flowable-task/process-api/runtime/tasks'</span></span><br></pre></td></tr></table></figure><p>您应该看到如下输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"1fae489a-070f-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="attr">"url"</span>: <span class="string">"http://localhost:8080/flowable-task/process-api/runtime/tasks/1fae489a-070f-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="attr">"owner"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"assignee"</span>: <span class="string">"admin"</span>,</span><br><span class="line">            <span class="attr">"delegationState"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Fill in a Leave Application Form"</span>,</span><br><span class="line">            <span class="attr">"description"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"createTime"</span>: <span class="string">"2018-12-24T00:01:54.893Z"</span>,</span><br><span class="line">            <span class="attr">"dueDate"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"priority"</span>: <span class="number">50</span>,</span><br><span class="line">            <span class="attr">"suspended"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"taskDefinitionKey"</span>: <span class="string">"sid-3BA1F4D1-500F-4766-89BF-519166929F2D"</span>,</span><br><span class="line">            <span class="attr">"scopeDefinitionId"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"scopeId"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"scopeType"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"tenantId"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"category"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"formKey"</span>: <span class="string">"leave-application-form"</span>,</span><br><span class="line">            <span class="attr">"parentTaskId"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"parentTaskUrl"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"executionId"</span>: <span class="string">"1fadfa77-070f-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="attr">"executionUrl"</span>: <span class="string">"http://localhost:8080/flowable-task/process-api/runtime/executions/1fadfa77-070f-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="attr">"processInstanceId"</span>: <span class="string">"1fadfa74-070f-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="attr">"processInstanceUrl"</span>: <span class="string">"http://localhost:8080/flowable-task/process-api/runtime/process-instances/1fadfa74-070f-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="attr">"processDefinitionId"</span>: <span class="string">"leave-application-process:1:c5ae6f5e-06f8-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="attr">"processDefinitionUrl"</span>: <span class="string">"http://localhost:8080/flowable-task/process-api/repository/process-definitions/leave-application-process:1:c5ae6f5e-06f8-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="attr">"variables"</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"sort"</span>: <span class="string">"id"</span>,</span><br><span class="line">    <span class="attr">"order"</span>: <span class="string">"asc"</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>formKey 包含与User任务关联的表单名称（’leave-application-form’）。</p><p>我们可以在表单存储库中查看“请假申请表”：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i <span class="string">'http://admin:test@localhost:8080/flowable-task/form-api/form-repository/form-definitions'</span></span><br></pre></td></tr></table></figure><p>您应该看到如下输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"c5bdb1a1-06f8-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="attr">"url"</span>: <span class="string">"http://localhost:8080/flowable-task/form-api/form-repository/form-definitions/c5bdb1a1-06f8-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="attr">"category"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Leave Application Form"</span>,</span><br><span class="line">            <span class="attr">"key"</span>: <span class="string">"leave-application-form"</span>,</span><br><span class="line">            <span class="attr">"description"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"version"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"resourceName"</span>: <span class="string">"form-leave-application-form.form"</span>,</span><br><span class="line">            <span class="attr">"deploymentId"</span>: <span class="string">"c5b0b94f-06f8-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">            <span class="attr">"tenantId"</span>: <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"sort"</span>: <span class="string">"name"</span>,</span><br><span class="line">    <span class="attr">"order"</span>: <span class="string">"asc"</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用它id来获取表单模型的JSON表示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i <span class="string">'http://admin:test@localhost:8080/flowable-task/form-api/form-repository/form-definitions/c5bdb1a1-06f8-11e9-a85e-0242ac110002/model'</span></span><br></pre></td></tr></table></figure><p>您应该看到如下输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"c5bdb1a1-06f8-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Leave Application Form"</span>,</span><br><span class="line">    <span class="attr">"key"</span>: <span class="string">"leave-application-form"</span>,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"http://localhost:8080/flowable-task/form-api/form/model"</span>,</span><br><span class="line">    <span class="attr">"fields"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"fieldType"</span>: <span class="string">"FormField"</span>,</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"givenName"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Given Name"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"required"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"readOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"overrideId"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"placeholder"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="attr">"layout"</span>: <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"fieldType"</span>: <span class="string">"FormField"</span>,</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"familyName"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Family Name"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"required"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"readOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"overrideId"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"placeholder"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"layout"</span>: <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"fieldType"</span>: <span class="string">"FormField"</span>,</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"employeeNumber"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Employee Number"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"integer"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"required"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"readOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"overrideId"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"placeholder"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"layout"</span>: <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"fieldType"</span>: <span class="string">"FormField"</span>,</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"fromDate"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"From Date"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"date"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"required"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"readOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"overrideId"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"placeholder"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"layout"</span>: <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"fieldType"</span>: <span class="string">"FormField"</span>,</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"toDate"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"To Date"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"date"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"required"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"readOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"overrideId"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"placeholder"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"layout"</span>: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"outcomes"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在导航到Tasks选项卡，查看Flowable的Form引擎如何呈现我们的Leave Application表单：</p><p><img src="https://img-blog.csdnimg.cn/20190717093617345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="流动性任务圈-3"></p><p>我们可以填写以下表格：</p><p><img src="https://img-blog.csdnimg.cn/20190717093624511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="流动性任务圈-4"></p><p>或者使用Flowable的REST API更新表单的变量并完成User任务：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type: application/json"</span> </span><br><span class="line">     -X POST http:<span class="comment">//admin:test@localhost:8080/flowable-task/process-api/runtime/tasks/1fae489a-070f-11e9-a85e-0242ac110002</span></span><br><span class="line">     -d <span class="string">"@data-1.json"</span></span><br></pre></td></tr></table></figure><p>数据1.json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"action"</span> : <span class="string">"complete"</span>,</span><br><span class="line">  <span class="attr">"variables"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"givenName"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Given Name"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"Rob"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"familyName"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Family Name"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"Ferguson"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"employeeNumber"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Employee Number"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"integer"</span>,</span><br><span class="line">        <span class="attr">"value"</span>: <span class="number">123456</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"fromDate"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"From Date"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"date"</span>,</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"2018-12-21T00:00:00+00:00"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"toDate"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"To Date"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"date"</span>,</span><br><span class="line">        <span class="attr">"value"</span>: <span class="string">"2019-01-07T00:00:00+00:00"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您应该看到如下输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Status: <span class="number">200</span> OK</span><br></pre></td></tr></table></figure><p>尽管返回OK，但调用似乎不会保存用户任务的变量：</p><p><img src="https://img-blog.csdnimg.cn/20190717093847232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="空白表格"><br>这里提出了以下Flowable问题：</p><ul><li>可流动的引擎：<a href="https://github.com/flowable/flowable-engine/issues/1471" target="_blank" rel="noopener">POST/runtime/tasks/{taskId}</a></li></ul><p>我也试过，<a href="https://www.flowable.org/docs/userguide/index.html#_submit_task_form_data" target="_blank" rel="noopener">POST/form/form-data</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">"Content-Type: application/json"</span> </span><br><span class="line">     -X POST http:<span class="comment">//admin:test@localhost:8080/flowable-task/process-api/form/form-data </span></span><br><span class="line">     -d <span class="string">"@data-2.json"</span></span><br></pre></td></tr></table></figure><p>数据2.json：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"taskId"</span> : <span class="string">"1fae489a-070f-11e9-a85e-0242ac110002"</span>,</span><br><span class="line">  <span class="string">"properties"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"givenName"</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Given Name"</span>,</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="string">"value"</span>: <span class="string">"Rob"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"familyName"</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Family Name"</span>,</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="string">"value"</span>: <span class="string">"Ferguson"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"employeeNumber"</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Employee Number"</span>,</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"integer"</span>,</span><br><span class="line">      <span class="string">"value"</span>: <span class="number">123456</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"fromDate"</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"From Date"</span>,</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"date"</span>,</span><br><span class="line">      <span class="string">"value"</span>: <span class="string">"2018-12-21T00:00:00+00:00"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"toDate"</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"To Date"</span>,</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"date"</span>,</span><br><span class="line">      <span class="string">"value"</span>: <span class="string">"2019-01-07T00:00:00+00:00"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您应该看到如下输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Status: <span class="number">204</span> No Content</span><br></pre></td></tr></table></figure><p>我不知道它为什么会返回，<code>204 No Content</code>所以我提出了以下Flowable问题：</p><p>可流动引擎：<a href="https://github.com/flowable/flowable-engine/issues/1473" target="_blank" rel="noopener">POST/Form/Form-Data</a><br>但它确实似乎保存了用户任务的变量（并完成了用户任务）：</p><p><img src="https://img-blog.csdnimg.cn/20190717094830863.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="形式数据"></p><h2 id="流动问题"><a href="#流动问题" class="headerlink" title="流动问题"></a>流动问题</h2><p>提出的关于Flowable的问题：</p><p>Flowable Engine： <a href="https://github.com/flowable/flowable-engine/issues/1471" target="_blank" rel="noopener">POST /runtime/tasks/{taskId}</a><br>Flowable Engine：<a href="https://github.com/flowable/flowable-engine/issues/1473" target="_blank" rel="noopener">POST /form/form-data</a><br>Flowable Engine：<a href="https://github.com/flowable/flowable-engine/issues/1474" target="_blank" rel="noopener">JSON body parameters</a></p><h2 id="下一步是什么"><a href="#下一步是什么" class="headerlink" title="下一步是什么"></a>下一步是什么</h2><p>在下一篇文章中，我们将使用Angular，Angular Material和Flowable的REST API来创建一个定制的Task List组件：</p><p><img src="https://img-blog.csdnimg.cn/20190717095140835.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="任务列表"></p><p>源代码：<br>GitHub：<a href="https://github.com/Robinyo/serendipity" target="_blank" rel="noopener">Serendipity</a><br>参考文献：<br>Paul Holmes-Higgin的博客：<a href="https://paulhh.wordpress.com/2017/01/31/flowable-6-instant-gratification/" target="_blank" rel="noopener">Instant Gratification with Flowable 6</a></p>]]></content>
      
      
      <categories>
          
          <category> Flowable </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flowable </tag>
            
            <tag> REST API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Jenkins+Gitlab+Docker实现SpringBoot项目自动部署</title>
      <link href="/2019/08/25/%E5%9F%BA%E4%BA%8EJenkins-Gitlab-Docker%E5%AE%9E%E7%8E%B0SpringBoot%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/08/25/%E5%9F%BA%E4%BA%8EJenkins-Gitlab-Docker%E5%AE%9E%E7%8E%B0SpringBoot%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>@<a href="基于Jenkins+Gitlab+Docker实现SpringBoot项目自动部署">TOC</a></p><h1 id="1-使用Docker搭建Jenkins"><a href="#1-使用Docker搭建Jenkins" class="headerlink" title="1. 使用Docker搭建Jenkins"></a>1. 使用Docker搭建Jenkins</h1><h2 id="1-1-拉取Jenkins镜像"><a href="#1-1-拉取Jenkins镜像" class="headerlink" title="1.1 拉取Jenkins镜像"></a>1.1 拉取Jenkins镜像</h2><p>进入官网：<a href="https://jenkins.io/download/" target="_blank" rel="noopener">https://jenkins.io/download/</a><br>点击<strong>Docker</strong>进入Docker Hub<br><img src="https://img-blog.csdnimg.cn/20190802144218786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="Jenkins官网"><br>我们这里选择jenkins/jenkins:lts版本的Jenkins，因为Jenkins:latest版本是官方版本，而且是英文的，下载插件什么的因为<strong>墙</strong>的各种原因导致无法下载和下载报错</p><p>复制红框中的命令：docker pull jenkins/jenkins:lts拉取镜像，如果下载镜像比较慢可以考虑给docker设置一个镜像加速【推荐使用aliyun的，不会的可以百度一下】<br><img src="https://img-blog.csdnimg.cn/2019080214463840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="复制拉取Jenkins镜像的命令"><br>在服务器上输入命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190802145628771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="拉取Jenkins镜像"><br>注意查看 docker镜像中，Jenkins版本是否是最新版</p><p>命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect b137a5753eb1</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190802145803554.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="查看Jenkins是否是最新版"></p><h2 id="1-2-创建目录"><a href="#1-2-创建目录" class="headerlink" title="1.2 创建目录"></a>1.2 创建目录</h2><p>为了方便后期Jenkins中配置文件的修改，同时，防止jenkins中重要文件因为容器损毁或删除导致文件丢失，因此需要将/var/jenkins_home目录对外挂载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /apps/devops/jenkins</span><br></pre></td></tr></table></figure><p>对目录开放docker进程操作的完全读写的权限</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">777</span> /apps/devops/jenkins</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190802150503285.png" alt="创建挂载目录并授权"></p><h2 id="1-3-启动容器"><a href="#1-3-启动容器" class="headerlink" title="1.3 启动容器"></a>1.3 启动容器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p <span class="number">9003</span>:<span class="number">8080</span> -p <span class="number">9004</span>:<span class="number">50000</span>  --restart always -v /apps/devops/jenkins:<span class="regexp">/var/</span>jenkins_home --name jenkins  jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><p>-p 端口映射：Jenkins是Java程序，默认端口是8080<br><img src="https://img-blog.csdnimg.cn/20190802150623757.png" alt="启动Jenkins容器"></p><h2 id="1-4-打开Jenkins管理页面"><a href="#1-4-打开Jenkins管理页面" class="headerlink" title="1.4 打开Jenkins管理页面"></a>1.4 打开Jenkins管理页面</h2><p>访问地址：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//192.168.143.128:9003</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/201908021514289.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="Jenkins初始界面"><br>出现如上页面，代表jenkins启动成功。</p><h2 id="1-5-查看日志获取初始密码"><a href="#1-5-查看日志获取初始密码" class="headerlink" title="1.5 查看日志获取初始密码"></a>1.5 查看日志获取初始密码</h2><p>命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f jenkins</span><br></pre></td></tr></table></figure><p>复制如下图中红框内的初始密码<br>当然，你也可以不通过日志查看，你可以进入黄色框中描述的文件查看初始密码也是一样的，二选一<br><img src="https://img-blog.csdnimg.cn/20190802151206118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="查看日志并复制初始密码"><br>将密码复制、粘贴到如下框框中，进入jenkins，需要等待数十秒（可能更久）！<br><img src="https://img-blog.csdnimg.cn/20190802151346223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="粘贴初始密码在这里"><br>如果出现下图情况，等很久，还没有进入<br><img src="https://img-blog.csdnimg.cn/20190802152234419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="等等很久未进入"><br><strong>解决方案</strong>：<br>① 进入我们前面挂载的Jenkins目录 /apps/devops/jenkins，执行命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi hudson.model.UpdateCenter.xml</span><br></pre></td></tr></table></figure><p>② 将文件<strong>hudson.model.UpdateCenter.xml</strong>中<strong><a href="https://updates.jenkins.io/update-center.json" target="_blank" rel="noopener">https://updates.jenkins.io/update-center.json</a></strong>改成<strong><a href="http://updates.jenkins.io/update-center.json" target="_blank" rel="noopener">http://updates.jenkins.io/update-center.json</a></strong>（把https改成http）<br><img src="https://img-blog.csdnimg.cn/20190802152532582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="解决方案"><br>③ 保存，重启Jenkins容器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]# docker restart jenkins</span><br><span class="line">jenkins</span><br><span class="line">[root@localhost jenkins]#</span><br></pre></td></tr></table></figure><p>④ 重新进入Jenkins管理页面：<a href="http://192.168.142.128:9003（稍等一会儿，就可以进入**步骤6.安装建议的插件页面**）" target="_blank" rel="noopener">http://192.168.142.128:9003（稍等一会儿，就可以进入**步骤6.安装建议的插件页面**）</a></p><h2 id="1-6-安装推荐的插件"><a href="#1-6-安装推荐的插件" class="headerlink" title="1.6 安装推荐的插件"></a>1.6 安装推荐的插件</h2><p>如下图所示，左侧显示安装推荐的插件，右侧选择自定义安装插件。<br><img src="https://img-blog.csdnimg.cn/20190802153344905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="安装推荐的插件"><br>我们选择安装推荐的插件，点击左侧的</p><p><img src="https://img-blog.csdnimg.cn/20190802153421810.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="安装推荐的插件中……"><br>如果全部都能正确安装，则会自动进入如下图界面<br><img src="https://img-blog.csdnimg.cn/20190802154005842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="创建第一个管理员用户"><br>将信息输入对应输入框内，点击<strong>保存并完成</strong>，进入如下图所示<br><img src="https://img-blog.csdnimg.cn/20190802154316872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="实例配置"></p><h2 id="1-7-成功安装Jenkins"><a href="#1-7-成功安装Jenkins" class="headerlink" title="1.7 成功安装Jenkins"></a>1.7 成功安装Jenkins</h2><p>默认，点击<strong>保存并完成</strong>，OK，这就算搭建成功了（因为我是在VMware CentOS7上使用Docker搭建的Jenkins,GitLab，gitlab又非常耗费资源，所以可能会卡住不动，重启一下Jenkins就可以了），如图<br><img src="https://img-blog.csdnimg.cn/20190802154927484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="Jenkins管理页面主页"></p><h1 id="2-配置Jenkins"><a href="#2-配置Jenkins" class="headerlink" title="2. 配置Jenkins"></a>2. 配置Jenkins</h1><h2 id="2-1-设置Jenkins时区为北京时间"><a href="#2-1-设置Jenkins时区为北京时间" class="headerlink" title="2.1 设置Jenkins时区为北京时间"></a>2.1 设置Jenkins时区为北京时间</h2><p>点击<strong>系统管理</strong>——<strong>脚本命令行</strong><br><img src="https://img-blog.csdnimg.cn/20190802155614588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="打开脚本命令行"><br>输入脚本并<strong>运行</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">'org.apache.commons.jelly.tags.fmt.timeZone'</span>, <span class="string">'Asia/Shanghai'</span>)</span><br></pre></td></tr></table></figure><p>如图显示<strong>Result</strong>表示成功<br><img src="https://img-blog.csdnimg.cn/2019080215584431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="运行脚本命令"></p><h2 id="2-2-安装自动化构建和部署所需的插件"><a href="#2-2-安装自动化构建和部署所需的插件" class="headerlink" title="2.2 安装自动化构建和部署所需的插件"></a>2.2 安装自动化构建和部署所需的插件</h2><p>所需插件：【Maven Integration】、【Pipeline Maven Integration】、【Gitlab】、【Gitlab hook】、【SSH】、【Publish Over SSH】</p><p>进入<strong>系统管理</strong>——<strong>插件管理</strong><br><img src="https://img-blog.csdnimg.cn/20190802160022476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="进入插件管理"><br>① 安装Maven插件：点击<strong>可选插件</strong>——过滤MavenIntegration插件——勾选Maven Integration和Pipeline Maven Integration——点击<strong>直接安装</strong><br><img src="https://img-blog.csdnimg.cn/20190802160203495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="安装Maven插件"><br>如图，开始安装Maven插件<br><img src="https://img-blog.csdnimg.cn/2019080216032045.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="安装Maven插件"><br>② 安装Gitlab插件：点击<strong>可选插件</strong>——过滤Gitlab插件——勾选Gitlab和Gitlab hook——点击<strong>直接安装</strong><br><img src="https://img-blog.csdnimg.cn/20190802160602917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="安装gitlab插件"><br>如图，开始安装Gitlab插件<br><img src="https://img-blog.csdnimg.cn/2019080216090179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="安装Gitlab插件和Gitlab Hook插件中……"><br>③ 安装SSH插件和Publish Over SSH插件：点击<strong>可选插件</strong>——过滤SSH插件——勾选SSH和Publish Over SSH——点击<strong>直接安装</strong></p><p><strong>安装Publish Over SSH插件的原因</strong>：因为本方式是使用docker启动jenkin服务，所以在jenkins后续执行构建任务时候，需要在build成功后，将服务的jar包[以spring boot]服务为例，需要将jar包拷贝到Dockerfile所在服务器的指定目录，进行微服务的启动；所以，此处需要配置SSH服务器的连接，意思就是在jenkins的任务结束后，去执行指定的服务器上的shell命令，做spring boot或cloud服务的镜像的构建，容器的运行，等一系列的事情<br><img src="https://img-blog.csdnimg.cn/20190802161052884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="安装SSH插件"><br>如图，开始安装SSH插件<br><img src="https://img-blog.csdnimg.cn/20190802161409566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="安装SSH插件中……"><br>插件全部安装完成后，可以重启一下Jenkins</p><h2 id="2-3-添加凭据"><a href="#2-3-添加凭据" class="headerlink" title="2.3 添加凭据"></a>2.3 添加凭据</h2><p><img src="https://img-blog.csdnimg.cn/20190802161838437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="进入添加凭据"><br>点击<strong>添加凭据</strong>——输入宿主机服务器的用户名和密码<br><img src="https://img-blog.csdnimg.cn/2019080216251979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="添加凭据"><br>点击<strong>确定</strong>后<br><img src="https://img-blog.csdnimg.cn/2019080216275264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="成功添加凭据"></p><h2 id="2-4-配置SSH-remote-hosts"><a href="#2-4-配置SSH-remote-hosts" class="headerlink" title="2.4 配置SSH remote hosts"></a>2.4 配置SSH remote hosts</h2><p>这个配置是干什么的呢？配置SSH连接Dockerfile所在服务器的相关信息，并添加凭证，最后测试连接并保存，以备后面使用！！！</p><p>点击<strong>系统管理</strong>——<strong>系统设置</strong><br><img src="https://img-blog.csdnimg.cn/20190802163015382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="系统设值"><br>找到<strong>配置</strong>——下拉选择<strong>SSH remote hosts</strong><br><img src="https://img-blog.csdnimg.cn/20190802163138488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="选择SSH remote hosts"><br>如下图，输入对应的信息，并校验是否连接成功！成功后，点击<strong>应用</strong>——点击<strong>保存</strong><br><img src="https://img-blog.csdnimg.cn/20190802163637799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="输入SSH信息"></p><h2 id="2-5-全局工具配置"><a href="#2-5-全局工具配置" class="headerlink" title="2.5 全局工具配置"></a>2.5 全局工具配置</h2><p>由于我们要实现的是SpringBoot项目的自动化部署操作，所以需要安装JDK、Git、Maven、Docker<br><img src="https://img-blog.csdnimg.cn/20190802164335958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="进入全局工具配置"></p><h3 id="2-5-1-安装JDK"><a href="#2-5-1-安装JDK" class="headerlink" title="2.5.1 安装JDK"></a>2.5.1 安装JDK</h3><p>可以安装多个，根据项目JDK版本需求</p><p>输入自定义JDK名称——勾选自动安装——输入Oracle账户、密码——选择JDK版本——勾选同意协议<br><img src="https://img-blog.csdnimg.cn/20190802164948779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="安装JDK"><br><img src="https://img-blog.csdnimg.cn/20190802165240416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="输入Oracle账户密码"></p><h3 id="2-5-2-安装Git"><a href="#2-5-2-安装Git" class="headerlink" title="2.5.2 安装Git"></a>2.5.2 安装Git</h3><p>输入自定义Git名称——勾选自动安装<br><img src="https://img-blog.csdnimg.cn/20190802165359421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="安装Git"></p><h3 id="2-5-3-安装Maven"><a href="#2-5-3-安装Maven" class="headerlink" title="2.5.3 安装Maven"></a>2.5.3 安装Maven</h3><p>输入自定义名称——勾选自动安装——选择版本<br><img src="https://img-blog.csdnimg.cn/20190802165524516.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="安装Maven"></p><h3 id="2-5-4-安装Docker"><a href="#2-5-4-安装Docker" class="headerlink" title="2.5.4 安装Docker"></a>2.5.4 安装Docker</h3><p>输入自定义名称——勾选自动安装<br><img src="https://img-blog.csdnimg.cn/20190802165704291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="安装Docker"><br>最后，点击<strong>应用</strong>——点击<strong>保存</strong>，OK，完成</p><p>那这些在什么时候才真正的安装了呢？</p><p>是在初次使用到JDK或Maven的时候，才会去自动安装</p><h2 id="2-6-全局安全配置"><a href="#2-6-全局安全配置" class="headerlink" title="2.6 全局安全配置"></a>2.6 全局安全配置</h2><p>点击<strong>系统管理</strong>——<strong>全局安全配置</strong><br><img src="https://img-blog.csdnimg.cn/20190802165844108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="进入全局安全配置"><br>去掉<strong>防止跨站点请求伪造</strong>前的勾——点击<strong>应用</strong>——<strong>保存</strong><br><img src="https://img-blog.csdnimg.cn/20190802170028267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="取消勾选防止跨站点请求伪造"><br>这里要说明一下为什么去掉这个勾选：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webhooks与jenkins配合使用时提示：HTTPStatus403-Novalidcrumbwasincludedintherequest,这是因为jenkins在http请求头部中放置了一个名为.crumb的token。在使用了反向代理，并且在jenkins设置中勾选了“防止跨站点请求伪造（Prevent Cross Site Request Forgery exploits）”之后此token会被转发服务器apache/nginx认为是不合法头部而去掉。导致跳转失败。</span><br></pre></td></tr></table></figure><h2 id="2-7-关于webhook"><a href="#2-7-关于webhook" class="headerlink" title="2.7 关于webhook"></a>2.7 关于webhook</h2><p>这里需要声明一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>webhook网络钩子</span><br><span class="line">可以看成是一个callback  回调方法</span><br><span class="line">本回调方法核心即包含：</span><br><span class="line">    触发条件+可供触发的URL+密码(可选) </span><br><span class="line">    触发条件为:push、merge、PR（即 New  Pull Request）等等git操作，</span><br><span class="line">    比如你提交一个push操作，就会触发URL请求，会以POST请求去请求这个URL。</span><br><span class="line">除此以外，你还可以自己指定这个POST请求的数据格式。（<span class="built_in">JSON</span>，x-www-form-urlencoded等）。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>webhook是gitlab端的</span><br><span class="line">触发webhook的条件，可以自行配置，都是本地对gitlab的git操作</span><br><span class="line">触发后去请求的URL地址，是Jenkins提供的。也就是触发后是去请求Jenkins的</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>而实现代码从gitlab到jenkins到自动部署，webhook就是gitlab和jenkins之间的关键点。</span><br><span class="line">后续会先配置jenkins，以获取到URL和Token,拿着这两个东西去gitlab配置webhook，即可。</span><br><span class="line">同时，webhook本身还会有很多的触发条件可以勾选。后续步骤可见！</span><br></pre></td></tr></table></figure><h1 id="3-新建Jenkins任务"><a href="#3-新建Jenkins任务" class="headerlink" title="3. 新建Jenkins任务"></a>3. 新建Jenkins任务</h1><h2 id="3-1-点击新建任务，输入名称【本处输入名称注意】"><a href="#3-1-点击新建任务，输入名称【本处输入名称注意】" class="headerlink" title="3.1 点击新建任务，输入名称【本处输入名称注意】"></a>3.1 点击新建任务，输入名称【本处输入名称注意】</h2><p>【注意，本名称一般和项目名称一致，因为本名称会在jenkins工作空间下生成目录，类似于IDEA或Ecplise的工作空间的概念】</p><p>【所以，一般情况下，保证本名称=项目名称=docker镜像名称=docker容器名称  这样能尽可能的减轻jenkins配置的shell命令的复杂性！从而形成一定的规范！！】</p><p>选择构建一个Maven项目【因为是springboot的服务】</p><p><img src="https://img-blog.csdnimg.cn/2019080313022519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="新建任务"></p><h2 id="3-2-源码管理"><a href="#3-2-源码管理" class="headerlink" title="3.2 源码管理"></a>3.2 源码管理</h2><p>输入描述信息，<strong>源码管理</strong>选择Git，从gitlab复制克隆地址粘贴到Repository URL中，没有报错就表示OK的，（注意，这里我是克隆HTTP方式的地址，如果你是克隆SSH方式的地址，你需要添加Creadentials，配置个API Token就可以了）<br><img src="https://img-blog.csdnimg.cn/20190803130525922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="源码管理"></p><h2 id="3-3-构建触发器"><a href="#3-3-构建触发器" class="headerlink" title="3.3 构建触发器"></a>3.3 构建触发器</h2><p>这里会获取到文章开始提到的URL和Token,这两个东西需要记录下来，供gitlab配置webhook使用<br><img src="https://img-blog.csdnimg.cn/2019080313103583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="构建触发器-1"><br>点击<strong>高级</strong>，拉下来找到<strong>Generate</strong>并点击，生成一串Secret Token：24d90d26b374ae2df2cda01c17338843（拿小本本记一下这个Token，等下跟上面的URL都会用到的）<br><img src="https://img-blog.csdnimg.cn/20190803131304753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="高级"></p><h2 id="3-4-添加webhook"><a href="#3-4-添加webhook" class="headerlink" title="3.4 添加webhook"></a>3.4 添加webhook</h2><p>前往gitlab，进入要构建的项目，在<strong>setting</strong>中选择<strong>Integrations</strong>，输入<em>URL<em>和</em>Secret Token</em> 这两在上面图中已经给你标注了，去掉<strong>Enable SSL verification</strong>的勾选</p><p>根据自己的需求，勾选webhook的触发事件都有哪些<br><img src="https://img-blog.csdnimg.cn/20190803163935721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="添加webhook"><br>点击<strong>Add webhook</strong>，如图表示成功添加了webhook<br><img src="https://img-blog.csdnimg.cn/20190803164014696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="成功添加webhook"></p><h2 id="3-5-构建环境"><a href="#3-5-构建环境" class="headerlink" title="3.5 构建环境"></a>3.5 构建环境</h2><p>勾选<strong>Add timestamps to the Console Output</strong>，等下可以看到控制台打印的信息，这个根据自己的需求勾选哈<br><img src="https://img-blog.csdnimg.cn/20190803131513510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="构建环境"></p><h2 id="3-6-Pre-Steps-构建之前的步骤"><a href="#3-6-Pre-Steps-构建之前的步骤" class="headerlink" title="3.6 Pre Steps(构建之前的步骤)"></a>3.6 Pre Steps(构建之前的步骤)</h2><p>配置前一步需要做的事情是：清理本项目在jenkins的workspace中的历史文件夹</p><p>你可以不用知道WORKSPACE具体的地址在哪里，因为下方有链接可以查看到当前jenkins中有哪些可用的变量供你使用</p><p>默认WORKSPACE地址：/var/jenkins_home/workspace（如果你jenkins是docker启动的，并且挂载了目录在宿主机，那你在宿主机也是可以看到的，即 /apps/Devops/jenkins/workspace）</p><p>本处选择是是，执行shell，则表示本处配置的shell命令，是默认在jenkins容器中执行的，而不是在宿主机上</p><p>下拉选择<strong>执行 shell</strong><br><img src="https://img-blog.csdnimg.cn/20190803131635108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="Pre Steps"><br>打开<strong>可用的环境变量列表</strong>看看，WORKSPACE是我们要的<br><img src="https://img-blog.csdnimg.cn/20190803131816460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="环境变量列表"><br>在执行 shell的命令中输入以下命令，设置全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SERVER_NAME_1=springboot</span><br><span class="line">echo <span class="string">"=========================&gt;&gt;&gt;&gt;&gt;&gt;&gt;工作空间WORKSPACE的地址：$WORKSPACE "</span></span><br><span class="line">cd $WORKSPACE</span><br><span class="line">echo <span class="string">"=========================&gt;&gt;&gt;&gt;&gt;&gt;&gt;进入工作空间WORKSPACE，清除工作空间中原项目的工作空间$SERVER_NAME_1 "</span></span><br><span class="line">rm -rf $SERVER_NAME_1</span><br><span class="line">echo <span class="string">"=========================&gt;&gt;&gt;&gt;&gt;&gt;&gt;清除工作空间中原项目的工作空间$SERVER_NAME_1 ......成功success"</span></span><br></pre></td></tr></table></figure><p>注意：本处的SERVER_NAME_1=springboot 是配置项目的名称</p><h2 id="3-7-Build-构建"><a href="#3-7-Build-构建" class="headerlink" title="3.7 Build(构建)"></a>3.7 Build(构建)</h2><p>我们是springboot项目，所以用到maven，这里设置一下全局操作，clean项目，并打成jar包，所以这里输入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean package</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190803132243505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="Build"></p><h2 id="3-8-Post-Steps-执行任务"><a href="#3-8-Post-Steps-执行任务" class="headerlink" title="3.8 Post Steps(执行任务)"></a>3.8 Post Steps(执行任务)</h2><p>只在jenkins构建成功后，才执行这一步</p><p>因为最后的构建成功的maven项目的jar包是以docker启动服务为目的，所以最后的docker操作，一定是在jenkins容器以外的服务器上运行的，可能是本机宿主机，也可能是远程的服务器，这个根据自己的情况去配置</p><p>本处选择，在远程的SSH执行shell脚本</p><p>选中<strong>只有构建成功才执行这些命令</strong>，然后选择<strong>Execute shell script on remote host using ssh</strong><br><img src="https://img-blog.csdnimg.cn/20190803132400286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="Post Steps"><br>创建SSH执行命令，命令内容太多了，从创建文件夹和Dockerfile到docker容器运行，有需要的自己去下载，<a href="https://download.csdn.net/download/cjiankai/11467733" target="_blank" rel="noopener">SSH执行命令下载地址</a><br><img src="https://img-blog.csdnimg.cn/201908031601425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="Execute ssh script on remote host using ssh"><br>OK，到这里基本的任务已经新建成功，至于后续的两个步骤，根据自己的需求自行配置，没有难度的<br><img src="https://img-blog.csdnimg.cn/20190803145036144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="后续步骤"><br>点击<strong>应用</strong>，<strong>保存</strong></p><h2 id="3-9-测试"><a href="#3-9-测试" class="headerlink" title="3.9 测试"></a>3.9 测试</h2><p>测试push事件触发自动化构建和部署<br><img src="https://img-blog.csdnimg.cn/20190803150016148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="test push even"><br>前往gitlab,刚我们新增的webhook，点击<strong>test</strong>下拉选择<strong>push events</strong>，出现HTTP 200表示OK了<br><img src="https://img-blog.csdnimg.cn/20190803150242359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="成功push events"><br>回到Jenkins可以看到任务列表，进入任务列表中的springboot，可以看到构建历史<br><img src="https://img-blog.csdnimg.cn/20190803150659476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="构建历史"><br>点击构建历史中的其中一个任务，可以看到真正构建中<br><img src="https://img-blog.csdnimg.cn/20190803150942545.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击<strong>控制台输出</strong>，可以看到执行的命令都在控制台输出了<br><img src="https://img-blog.csdnimg.cn/20190803151354192.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="控制台输出"><br>看到控制台输出最后显示：<strong>SUCESS</strong> 表示成功了<br><img src="https://img-blog.csdnimg.cn/20190803155125933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="成功"><br>在服务器上执行命令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>可以看到我们启动起来的springboot容器<br><img src="https://img-blog.csdnimg.cn/20190803155256715.png" alt="启动起来的容器"><br>在浏览器输入：http://服务器ip:9009/test 即可访问刚自动部署的项目<br><img src="https://img-blog.csdnimg.cn/20190803155448157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="项目预览"><br>至此，我们的自动部署就已经完成，如果大家有哪里不懂的或者我写的不对的，敬请指教！</p><h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h1><p>Angel挤一挤   <a href="https://www.cnblogs.com/sxdcgaq8080/p/10489369.html" target="_blank" rel="noopener">《【Devops】【docker】【CI/CD】2.docker启动jenkins环境+安装必要的插件 》</a></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> Gitlab </tag>
            
            <tag> Docker </tag>
            
            <tag> CI/CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种工作流的引擎的比较</title>
      <link href="/2019/08/25/%E5%90%84%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%9A%84%E5%BC%95%E6%93%8E/"/>
      <url>/2019/08/25/%E5%90%84%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%9A%84%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><h2 id="对比框架简介"><a href="#对比框架简介" class="headerlink" title="对比框架简介"></a>对比框架简介</h2><p><img src="https://img-blog.csdnimg.cn/20190814082916914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>jBPM，是始祖，但目前市场较小，不作为对比重点</li><li>Activiti，2010年基于jBPM诞生</li><li>Flowable，2016年基于Activiti诞生</li><li>Comframe，亚信的工作流框架，从时间上推测，用的可能是jBPM2.0或者3.0</li><li>新零售工作流框架，从使用的ExtJS3和dwr推测，应该诞生于2010年前后，应该没有用开源工作流框架，功能可能比较简单</li></ul><h2 id="对比框架选择"><a href="#对比框架选择" class="headerlink" title="对比框架选择"></a>对比框架选择</h2><p><img src="https://img-blog.csdnimg.cn/2019081408314735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>jBPM7主要与JBoss下的规则引擎集成较好，其他没有什么优势，不太建议</li><li>Activiti6在主力Tijs Rademakers和Joram Barrez离开后，就没有开发了，一直停留在6.0.0，不太建议</li><li>Salaboy可能是空降，对核心引擎不熟，也可能Alfresco想发展cloud方向，因此6.0以后直接启动7.0</li><li>Flowable6以后，Tijs继续他的本行，开发引擎核心</li></ul><p>因此，这里对比activiti7和flowable6</p><h2 id="RoadMap对比"><a href="#RoadMap对比" class="headerlink" title="RoadMap对比"></a>RoadMap对比</h2><p>Activiti RoadMap</p><p><img src="https://img-blog.csdnimg.cn/20190814083309681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Flowable RoadMap</p><p><img src="https://img-blog.csdnimg.cn/20190814083410162.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看出：</p><ul><li>Activiti7的方向在云化</li><li>而Flowable6的方向是继续它的引擎核心，新加了RESTful任务（这个activiti没有，我之前是通过写代码实现），新加了异步存历史数据从而提升效率等核心功能</li><li>冀正在他的博客里讲了Flowable比Activiti多的功能：<a href="https://blog.csdn.net/qq_30739519/article/details/82493456" target="_blank" rel="noopener">https://blog.csdn.net/qq_30739519/article/details/82493456</a> 当然，因为冀正是flowable的commiter，所以没有说Activiti比Flowable多的功能，有点偏颇，可以作为参考。</li></ul><h2 id="功能与其他总体对比"><a href="#功能与其他总体对比" class="headerlink" title="功能与其他总体对比"></a>功能与其他总体对比</h2><p><img src="https://img-blog.csdnimg.cn/20190814083531389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>给人的初步感觉：</p><p><img src="https://img-blog.csdnimg.cn/20190814083556739.png" alt="在这里插入图片描述"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>具体选择看看锦华和龚总觉得哪个功能更为重要</li><li>我个人根据开发效率、功能、总体印象排列如下<ul><li>flowable6</li><li>activiti7</li><li>activiti6</li><li>AI Comframe（AIF）</li><li>新零售工作流</li><li>jbpm7</li><li>activiti5、flowable5、jbpm5/6/4/3，其他国产开源框架或商用框架等</li></ul></li></ul><p>本文由【Danni3】发布于开源中国，原文链接：<a href="https://my.oschina.net/u/2464371/blog/3031155" target="_blank" rel="noopener">https://my.oschina.net/u/2464371/blog/3031155</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flowable </tag>
            
            <tag> 工作流 </tag>
            
            <tag> activiti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于角色的权限访问控制(RBAC)</title>
      <link href="/2019/08/25/%E5%9F%BA%E4%BA%8E%E8%A7%92%E8%89%B2%E7%9A%84%E6%9D%83%E9%99%90%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-RBAC/"/>
      <url>/2019/08/25/%E5%9F%BA%E4%BA%8E%E8%A7%92%E8%89%B2%E7%9A%84%E6%9D%83%E9%99%90%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-RBAC/</url>
      
        <content type="html"><![CDATA[<p>@<a href="基于角色的权限访问控制（RBAC）">TOC</a></p><h1 id="RBAC模型"><a href="#RBAC模型" class="headerlink" title="RBAC模型"></a>RBAC模型</h1><h2 id="什么是RBAC"><a href="#什么是RBAC" class="headerlink" title="什么是RBAC"></a>什么是RBAC</h2><p>RBAC（全称：Role-Based Access Control）基于角色的权限访问控制，作为传统访问控制（自主访问，强制访<br>问）的有前景的代替受到广泛的关注。在RBAC中，权限与角色相关联，用户通过成为适当角色的成员而得到这些<br>角色的权限。这就极大地简化了权限的管理。在一个组织中，角色是为了完成各种工作而创造，用户则依据它的责<br>任和资格来被指派相应的角色，用户可以很容易地从一个角色被指派到另一个角色。角色可依新的需求和系统的合<br>并而赋予新的权限，而权限也可根据需要而从某角色中回收。角色与角色的关系可以建立起来以囊括更广泛的客观<br>情况。<br>访问控制是针对越权使用资源的防御措施，目的是为了限制访问主体（如用户等） 对访问客体（如数据库资源等）<br>的访问权限。企业环境中的访问控制策略大部分都采用基于角色的访问控制（RBAC）模型，是目前公认的解决大<br>型企业的统一资源访问控制的有效方法</p><h2 id="基于RBAC的设计思路"><a href="#基于RBAC的设计思路" class="headerlink" title="基于RBAC的设计思路"></a>基于RBAC的设计思路</h2><p>基于角色的访问控制基本原理是在用户和访问权限之间加入角色这一层，实现用户和权限的分离，用户只有通过激<br>活角色才能获得访问权限。通过角色对权限分组，大大简化了用户权限分配表，间接地实现了对用户的分组，提高<br>了权限的分配效率。且加入角色层后，访问控制机制更接近真实世界中的职业分配，便于权限管理<br><img src="https://img-blog.csdnimg.cn/20190723100359279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="角色权限ER图"><br>在RBAC模型中，角色是系统根据管理中相对稳定的职权和责任来划分，每种角色可以完成一定的职能。用户通过<br>饰演不同的角色获得角色所拥有的权限，一旦某个用户成为某角色的成员，则此用户可以完成该角色所具有的职<br>能。通过将权限指定给角色而不是用户，在权限分派上提供了极大的灵活性和极细的权限指定粒度。</p><h2 id="表结构分析"><a href="#表结构分析" class="headerlink" title="表结构分析"></a>表结构分析</h2><p><img src="https://img-blog.csdnimg.cn/20190723100520592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="表结构分析"><br>一个用户拥有若干角色，每一个角色拥有若干权限。这样，就构造成“用户-角色-权限”的授权模型。在这种模型<br>中，用户与角色之间，角色与权限之间，一般者是多对多的关系。</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><p>某项目的需求是这样的，在应用系统中，权限是以什么样的形式展现出来的？对菜单的访问，页面上按钮的可见性，后端接口的控制，都要进行充分考虑</p><ul><li><strong>前端</strong><br>前端菜单：根据是否有请求菜单权限进行动态加载<br>按钮：根据是否具有此权限进行显示/隐藏的控制</li><li><strong>后端</strong></li><li>前端发送请求到后端接口，有必要对接口的访问进行权限的验证</li></ul><p>针对这样的需求，在有些设计中可以将菜单，按钮，后端API请求等作为资源，这样就构成了基于RBAC的另一种授<br>权模型（用户-角色-权限-资源）。<br><img src="https://img-blog.csdnimg.cn/20190723101218391.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="案例权限模型"><br>那么，它们的表结构就应该如下图，所示<br><img src="https://img-blog.csdnimg.cn/20190723101348785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="案例表结构分析"><br>这里要注意的是，权限表与菜单表、页面元素表与API接口表都是一对一的关系</p><h2 id="RBAC的优点"><a href="#RBAC的优点" class="headerlink" title="RBAC的优点"></a>RBAC的优点</h2><p>与传统的RBAC模型对比不难发现此种设计的好处：</p><ol><li>不需要区分哪些是操作，哪些是资源</li><li>方便扩展，当系统要对新的东西进行权限控制时，我只需要建立一个新的资源表，并确定这类权限的权限类<br>型标识即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> RBAC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RBAC </tag>
            
            <tag> 角色权限设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo主题Matery搭建个人博客</title>
      <link href="/2019/08/25/%E5%9F%BA%E4%BA%8EHexo%E4%B8%BB%E9%A2%98Matery%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/08/25/%E5%9F%BA%E4%BA%8EHexo%E4%B8%BB%E9%A2%98Matery%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>npm install -g hexo</p><h1 id="Hexo初始化"><a href="#Hexo初始化" class="headerlink" title="Hexo初始化"></a>Hexo初始化</h1><p><img src="https://img-blog.csdnimg.cn/20190825140033799.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="Hexo初始化"></p><p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p><p><img src="https://img-blog.csdnimg.cn/20190825140237151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="node_modules"></p><p> hexo g # 生成</p><p><img src="https://img-blog.csdnimg.cn/20190825140444190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt=" hexo g"></p><p>hexo s # 启动服务</p><p><img src="https://img-blog.csdnimg.cn/20190825140517509.png" alt="启动服务"></p><p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：</p><p><img src="https://img-blog.csdnimg.cn/20190825140820383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子</p><p><img src="https://img-blog.csdnimg.cn/20190825140626946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="访问http://localhost:4000"></p><p>hexo s是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突</p><h1 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h1><p>既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。本文就以 <a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">Matery</a> 为例</p><p>使用git clone将你喜欢的主题下载到themes文件夹下</p><p>git clone <a href="https://github.com/blinkfox/hexo-theme-matery.git" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery.git</a> themes/</p><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"categories"</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-09</span><span class="bullet">-30</span> <span class="number">17</span><span class="string">:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"tags"</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-09</span><span class="bullet">-30</span> <span class="number">18</span><span class="string">:23:38</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"about"</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-09</span><span class="bullet">-30</span> <span class="number">17</span><span class="string">:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"about"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"about"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"friends"</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">friends</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-12</span><span class="bullet">-12</span> <span class="number">21</span><span class="string">:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"friends"</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">"friends"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    <span class="attr">"avatar"</span>: <span class="string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"码酱"</span>,</span><br><span class="line">    <span class="attr">"introduction"</span>: <span class="string">"我不是大佬，只是在追寻大佬的脚步"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"http://luokangyuan.com/"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"前去学习"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">"avatar"</span>: <span class="string">"http://image.luokangyuan.com/4027734.jpeg"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"闪烁之狐"</span>,</span><br><span class="line">    <span class="attr">"introduction"</span>: <span class="string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://blinkfox.github.io/"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"前去学习"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">"avatar"</span>: <span class="string">"http://image.luokangyuan.com/avatar.jpg"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"ja_rome"</span>,</span><br><span class="line">    <span class="attr">"introduction"</span>: <span class="string">"平凡的脚步也可以走出伟大的行程"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"ttps://me.csdn.net/jlh912008548"</span>,</span><br><span class="line">    <span class="attr">"title"</span>: <span class="string">"前去学习"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-github-emojis --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  className:</span> <span class="string">github-emoji</span></span><br><span class="line"><span class="attr">  inject:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  styles:</span></span><br><span class="line"><span class="attr">  customEmojis:</span></span><br></pre></td></tr></table></figure><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-prism-plugin</span><br></pre></td></tr></table></figure><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">prism_plugin:</span></span><br><span class="line"><span class="attr">  mode:</span> <span class="string">'preprocess'</span>    <span class="comment"># realtime/preprocess</span></span><br><span class="line"><span class="attr">  theme:</span> <span class="string">'tomorrow'</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">false</span>    <span class="comment"># default false</span></span><br><span class="line"><span class="attr">  custom_css:</span></span><br></pre></td></tr></table></figure><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure><h3 id="中文链接转拼音（可选的）"><a href="#中文链接转拼音（可选的）" class="headerlink" title="中文链接转拼音（可选的）"></a>中文链接转拼音（可选的）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-permalink-pinyin --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink_pinyin:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  separator:</span> <span class="string">'-'</span> <span class="comment"># default: '-'</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordCount:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span> <span class="comment"># 将这个值设置为 true 即可.</span></span><br><span class="line"><span class="attr">  postWordCount:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  min2read:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  totalCount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">  hub:</span></span><br><span class="line"><span class="attr">  content:</span></span><br><span class="line"><span class="attr">  content_limit:</span> <span class="number">140</span></span><br><span class="line"><span class="attr">  content_limit_delim:</span> <span class="string">' '</span></span><br><span class="line"><span class="attr">  order_by:</span> <span class="bullet">-date</span></span><br></pre></td></tr></table></figure><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/blinkfox"</span> <span class="attr">class</span>=<span class="string">"tooltipped"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">data-tooltip</span>=<span class="string">"访问我的GitHub"</span> <span class="attr">data-position</span>=<span class="string">"top"</span> <span class="attr">data-delay</span>=<span class="string">"50"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-github"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fa-facebook</code></li><li>Twitter: <code>fa-twitter</code></li><li>Google-plus: <code>fa-google-plus</code></li><li>Linkedin: <code>fa-linkedin</code></li><li>Tumblr: <code>fa-tumblr</code></li><li>Medium: <code>fa-medium</code></li><li>Slack: <code>fa-slack</code></li><li>新浪微博: <code>fa-weibo</code></li><li>微信: <code>fa-wechat</code></li><li>QQ: <code>fa-qq</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>4.7.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"五月雨变奏电音"</span>,</span><br><span class="line"><span class="attr">"artist"</span>: <span class="string">"AnimeVibe"</span>,</span><br><span class="line"><span class="attr">"url"</span>: <span class="string">"http://xxx.com/music1.mp3"</span>,</span><br><span class="line"><span class="attr">"cover"</span>: <span class="string">"http://xxx.com/music-cover1.png"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Take me hand"</span>,</span><br><span class="line"><span class="attr">"artist"</span>: <span class="string">"DAISHI DANCE,Cecile Corbel"</span>,</span><br><span class="line"><span class="attr">"url"</span>: <span class="string">"/medias/music/music2.mp3"</span>,</span><br><span class="line"><span class="attr">"cover"</span>: <span class="string">"/medias/music/cover2.png"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Shape of You"</span>,</span><br><span class="line"><span class="attr">"artist"</span>: <span class="string">"J.Fla"</span>,</span><br><span class="line"><span class="attr">"url"</span>: <span class="string">"http://xxx.com/music3.mp3"</span>,</span><br><span class="line"><span class="attr">"cover"</span>: <span class="string">"http://xxx.com/music-cover3.png"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否在首页显示音乐.</span></span><br><span class="line"><span class="attr">music:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  showTitle:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  title:</span> <span class="string">听听音乐</span></span><br><span class="line"><span class="attr">  fixed:</span> <span class="literal">false</span> <span class="comment"># 是否开启吸底模式</span></span><br><span class="line"><span class="attr">  autoplay:</span> <span class="literal">false</span> <span class="comment"># 是否自动播放</span></span><br><span class="line"><span class="attr">  theme:</span> <span class="string">'#42b983'</span></span><br><span class="line"><span class="attr">  loop:</span> <span class="string">'all'</span> <span class="comment"># 音频循环播放, 可选值: 'all', 'one', 'none'</span></span><br><span class="line"><span class="attr">  order:</span> <span class="string">'list'</span> <span class="comment"># 音频循环顺序, 可选值: 'list', 'random'</span></span><br><span class="line"><span class="attr">  preload:</span> <span class="string">'auto'</span> <span class="comment"># 预加载，可选值: 'none', 'metadata', 'auto'</span></span><br><span class="line"><span class="attr">  volume:</span> <span class="number">0.7</span> <span class="comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span></span><br><span class="line"><span class="attr">  listFolded:</span> <span class="literal">false</span> <span class="comment"># 列表默认折叠</span></span><br><span class="line"><span class="attr">  listMaxHeight:</span> <span class="comment"># 列表最大高度</span></span><br></pre></td></tr></table></figure><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">typora-vue-theme主题介绍</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-09</span><span class="bullet">-07</span> <span class="number">09</span><span class="string">:25:00</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">typora-vue-theme主题介绍</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-09</span><span class="bullet">-07</span> <span class="number">09</span><span class="string">:25:00</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">赵奇</span></span><br><span class="line"><span class="attr">img:</span> <span class="string">/source/images/xxx.jpg</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">cover:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">coverImg:</span> <span class="string">/images/1.jpg</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">8</span><span class="string">d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">summary:</span> <span class="string">这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Markdown</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Typora</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">Markdown</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3N0YXRpYy5ibGlua2ZveC5jb20vbWF0ZXJ5LTIwMTgxMjAyLTEucG5n?x-oss-process=image/format,png" alt="首页"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3N0YXRpYy5ibGlua2ZveC5jb20vbWF0ZXJ5LTIwMTgxMjAyLTIucG5n?x-oss-process=image/format,png" alt="首页推荐文章"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3N0YXRpYy5ibGlua2ZveC5jb20vbWF0ZXJ5LTIwMTgxMjAyLTMucG5n?x-oss-process=image/format,png" alt="首页文章列表"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3N0YXRpYy5ibGlua2ZveC5jb20vbWF0ZXJ5LTIwMTgxMjAyLTcucG5n?x-oss-process=image/format,png" alt="首页文章列表"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3N0YXRpYy5ibGlua2ZveC5jb20vbWF0ZXJ5LTIwMTgxMjAyLTgucG5n?x-oss-process=image/format,png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span></span><br><span class="line"><span class="selector-class">.bg-color</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, #4cbf30 0%, #0f9d58 100%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> rainbow &#123;</span><br><span class="line">   <span class="comment">/* 动态切换背景颜色. */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> rainbow &#123;</span><br><span class="line">    <span class="comment">/* 动态切换背景颜色. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.bg-cover'</span>).css(<span class="string">'background-image'</span>, <span class="string">'url(/medias/banner/'</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getDay() + <span class="string">'.jpg)'</span>);</span><br></pre></td></tr></table></figure><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本记录"><a href="#版本记录" class="headerlink" title="版本记录"></a>版本记录</h2><ul><li>v1.0.4<ul><li>新增了能为每篇文章都自定义转载规则的功能；</li><li>修复上一页、下一页的自定义 <code>summary</code> 不显示的问题；</li><li>修复了友情链接显示错位的问题，改为了瀑布流的布局方式；</li><li>其他小细节 bug 的修改；</li></ul></li><li>v1.0.3<ul><li>新增了<code>TOC</code>展开、收缩的按钮和相关配置，默认显示此按钮；</li></ul></li><li>v1.0.2<ul><li>升级了 <a href="https://materializecss.com/" target="_blank" rel="noopener">Materialize</a> 框架版本为<code>1.0.0</code>，重构和修改了升级过程中的部分文件或问题；</li><li>新增了首页封面的全屏轮播特效，可以将更重要的文章设置到首页轮播中；</li><li>修复首页第一个按钮是中文的问题</li><li>修复了 iPhone 上点击搜索输入获取焦点的问题；</li><li>修复了 iPhone 上输入框获取焦点后页面放大的问题；</li><li>修复一些文章或 UI 显示问题；</li></ul></li><li>v1.0.1<ul><li>调整 <code>css</code>、<code>js</code> 的文件请求路径在主题的<code>_config.yml</code>中配置，便于你更快捷的配置自己的 CDN；</li><li>新增代码是否折行为可配置，默认为折行；</li><li>默认激活 <code>TOC</code> 功能，并新增为某篇文章关闭 <code>TOC</code> 的 <code>Front-matter</code> 配置选项；</li><li>修复文章滚动时，高亮的目录选项不准确的问题；</li><li><code>IOS</code>下移除搜索框自动获得焦点属性，防止自动获得焦点后导致视图上移；</li></ul></li><li>v1.0.0<ul><li>新增了所有基础功能；</li></ul></li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
      
      
      <categories>
          
          <category> Matery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows安装npm/cnpm的正确姿势</title>
      <link href="/2019/08/25/windows%E5%AE%89%E8%A3%85npm-cnpm%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"/>
      <url>/2019/08/25/windows%E5%AE%89%E8%A3%85npm-cnpm%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>下载node.js，官网地址：<a href="https://nodejs.org" target="_blank" rel="noopener">https://nodejs.org</a></p><p><img src="https://img-blog.csdnimg.cn/20190825132816917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="下载node.js"></p><p>我这里选择10.16.3.LTS(目前是最新版本)</p><p><code>注意</code>：安装npm首先需要下载node.js，因为npm是包含在node.js里面的一个包管理工具，就如同linux中的yum仓库，rpm包管理一样。</p><h1 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h1><p>安装好node.js也就安装了npm</p><p><img src="https://img-blog.csdnimg.cn/20190825132610107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="安装node.js-1"></p><p>傻瓜式安装，当然你可以修改安装目录，我这里的安装目录是：<code>D:\Program Files\nodejs</code></p><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>打开<code>cmd</code>命令窗口，输入<code>npm -v</code>或<code>node -v</code>命令，如图显示：6.9.0，表示npm的版本，npm安装成功，node验证自行去操作</p><p><img src="https://img-blog.csdnimg.cn/20190825133307948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="验证"></p><h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><p>① 在node.js的安装目录下（我的是：D:\Program Files\nodejs）创建文件夹node_global和node_cache，用于存放全局模块和cache(缓存) 如图</p><p><img src="https://img-blog.csdnimg.cn/20190825133918347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>② 创建完成后，在cmd命令窗口中执行下面的语句，注意修改你的node_global和node_cache目录所在</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Jack</span>&gt;<span class="title">npm</span> <span class="title">config</span> <span class="title">set</span> <span class="title">prefix</span> "<span class="title">D</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">nodejs</span>\<span class="title">node_global</span>"</span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">Jack</span>&gt;<span class="title">npm</span> <span class="title">config</span> <span class="title">set</span> <span class="title">cache</span>"<span class="title">D</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">nodejs</span>\<span class="title">node_cache</span>"</span></span><br></pre></td></tr></table></figure><p>③ 打开环境变量(系统属性中)，在“系统变量”中添加，变量名：“NODE_PATH”，变量值：“D:\program\PackageImportant\npm\node_global”，添加完成确定即可</p><p>④ 安装模块测试，在cmd命令窗口中执行下面的语句</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Jack</span>&gt;<span class="title">npm</span> <span class="title">install</span> <span class="title">express</span> -<span class="title">g</span></span></span><br></pre></td></tr></table></figure><h1 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h1><p>cnpm是淘宝镜像，因为在中国大陆地区使用npm下载会比较慢，所以建议使用cnpm</p><p>在cmd命令窗口中执行下面语句</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Jack</span>&gt;<span class="title">npm</span> <span class="title">install</span> -<span class="title">g</span> <span class="title">cnpm</span> --<span class="title">registry</span>=<span class="title">https</span>://<span class="title">registry.npm.taobao.org</span></span></span><br></pre></td></tr></table></figure><p>等待cnpm安装完成，输入<code>cnpm -v</code>命令，如果出现 “cnpm” 不是内部命令的话，继续往下看</p><h1 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h1><p>cnpm和npm不属于同一个路径下的，所以添加path环境变量:<code>D:\Program Files\nodejs\node_global</code></p><p><img src="https://img-blog.csdnimg.cn/20190825135254705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>重新打开cmd命令窗口，输入<code>cnpm -v</code>命令，如图表示cnpm安装成功</p><p><img src="https://img-blog.csdnimg.cn/20190825134922347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NqaWFua2Fp,size_16,color_FFFFFF,t_70" alt="验证cnpm"></p><p>至此，npm和cnpm安装成功~</p>]]></content>
      
      
      <categories>
          
          <category> node JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node JS </tag>
            
            <tag> npm </tag>
            
            <tag> cnpm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
